{"version":3,"sources":["../src/tiled/TiledMap.ts"],"names":[],"mappings":"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","file":"TiledMap.js","sourcesContent":["module tiled {\r\n\t'use strict';\r\n\r\n\texport class TiledMap {\r\n\r\n\t\trowCount: number;\r\n\t\tcolCount: number;\r\n\t\ttileWidth: number;\r\n\t\ttileHeight: number;\r\n\t\tscreenWidth: number;\r\n\t\tscreenHeight: number;\r\n\t\tscreenRows: number;\r\n\t\tscreenCols: number;\r\n\t\timagePathModifier: Function;\r\n\t\tlayers: TiledLayer[];\r\n\t\tlayersByName: { [name: string]: TiledLayer };\r\n\t\tobjectGroups: TiledLayer[];\r\n\t\ttilesets: TiledTileset[];\r\n\t\tproperties: any;\r\n\t\tversion: number;\r\n\t\torientation: string;\r\n\r\n\t\t/**\r\n\t\t * A 2d game map, generated in Tiled.\r\n\t\t * \r\n\t\t * @constructor\r\n\t\t */\r\n\t\tconstructor(data: any, args: any) {\r\n\r\n\t\t\tthis.rowCount = data.height;\r\n\t\t\tthis.colCount = data.width;\r\n\t\t\tthis.tileWidth = args.tileWidth;\r\n\t\t\tthis.tileHeight = args.tileHeight;\r\n\t\t\tthis.screenWidth = args.screenWidth;\r\n\t\t\tthis.screenHeight = args.screenHeight;\r\n\t\t\tthis.screenRows = Math.ceil(this.screenHeight / this.tileHeight);\r\n\t\t\tthis.screenCols = Math.ceil(this.screenWidth / this.tileWidth);\r\n\t\t\tlet imagePathModifier: Function = args ? args.imagePathModifier : null;\r\n\r\n\t\t\tthis.layers = [];\r\n\t\t\tthis.layersByName = {};\r\n\t\t\tthis.objectGroups = [];\r\n\t\t\tfor (let i: number = 0; i < data.layers.length; i++) {\r\n\t\t\t\tthis.addLayer(data.layers[i]);\r\n\t\t\t}\r\n\r\n\t\t\tthis.tilesets = [];\r\n\t\t\tif (data.tilesets && data.tilesets.length) {\r\n\t\t\t\tfor (let i: number = 0; i < data.tilesets.length; i++) {\r\n\t\t\t\t\tthis.tilesets.push(new tiled.TiledTileset(data.tilesets[i], imagePathModifier));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.properties = data.properties;\r\n\t\t\tthis.version = data.version;\r\n\t\t\tthis.orientation = data.orientation;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Adds a layer to this map.  This method is called internally by the library\r\n\t\t * and the programmer typically does not need to call it.\r\n\t\t * \r\n\t\t * @param {object} layerData The raw layer data.\r\n\t\t * @method\r\n\t\t */\r\n\t\taddLayer(layerData: any) {\r\n\t\t\tconst layer: TiledLayer = new tiled.TiledLayer(this, layerData);\r\n\t\t\tthis.layers.push(layer);\r\n\t\t\tthis.layersByName[layer.name] = layer;\r\n\t\t\tif (layer.isObjectGroup()) {\r\n\t\t\t\tthis.objectGroups.push(layer);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdraw(ctx: CanvasRenderingContext2D, centerRow: number, centerCol: number,\r\n\t\t\t\tdx: number = 0, dy: number = 0) {\r\n\r\n\t\t\tconst colCount: number = this.colCount;\r\n\t\t\tconst rowCount: number = this.rowCount;\r\n\r\n\t\t\tconst screenCols: number = this.screenRows;\r\n\t\t\tconst screenRows: number = this.screenCols;\r\n\t\t\tconst tileW: number = this.tileWidth;\r\n\t\t\tconst tileH: number = this.tileHeight;\r\n\t\t\tconst tileSize: number = tileW; // Assumes square tiles (!).  Fix me one day\r\n\t\t\tconst screenWidth: number = this.screenWidth;\r\n\t\t\tconst screenHeight: number = this.screenHeight;\r\n\r\n\t\t\tlet col0: number = centerCol - Math.floor(screenCols / 2);\r\n\t\t\tif (col0 < 0) {\r\n\t\t\t\tcol0 += colCount;\r\n\t\t\t}\r\n\t\t\tlet row0: number = centerRow - Math.floor(screenRows / 2);\r\n\t\t\tif (row0 < 0) {\r\n\t\t\t\trow0 += rowCount;\r\n\t\t\t}\r\n\r\n\t\t\t// Center point of screen, in map x,y coordinates.\r\n\t\t\tconst cx: number = centerCol * tileW + dx + tileW / 2;\r\n\t\t\tconst cy: number = centerRow * tileH + dy + tileH / 2;\r\n\r\n\t\t\t// Top-left of screen, in map x,y coordinates.\r\n\t\t\tconst x0: number = cx - screenWidth / 2;\r\n\t\t\tconst y0: number = cy - screenHeight / 2;\r\n\r\n\t\t\tlet topLeftCol: number = Math.floor(x0 / tileW);\r\n\t\t\tif ((x0 % tileSize) < 0) {\r\n\t\t\t\ttopLeftCol--;\r\n\t\t\t}\r\n\t\t\tconst tileEdgeX: number = topLeftCol * tileW;\r\n\r\n\t\t\tlet topLeftRow: number = Math.floor(y0 / tileH);\r\n\t\t\tif ((y0 % tileSize) < 0) { // e.g. is < 0 and not a multiple of tileSize\r\n\t\t\t\ttopLeftRow--;\r\n\t\t\t}\r\n\t\t\tconst tileEdgeY: number = topLeftRow * tileH; // getTileEdge(topLeftY);\r\n\r\n\t\t\t// The view coordinates at which to start painting.\r\n\t\t\tconst startX: number = tileEdgeX - x0;\r\n\t\t\tlet _x: number = startX;\r\n\t\t\tconst startY: number = tileEdgeY - y0;\r\n\t\t\tlet _y: number = startY;\r\n\r\n\t\t\tif (topLeftCol < 0) {\r\n\t\t\t\ttopLeftCol += colCount;\r\n\t\t\t}\r\n\t\t\tif (topLeftRow < 0) {\r\n\t\t\t\ttopLeftRow += rowCount;\r\n\t\t\t}\r\n\r\n\t\t\t// Paint until the end of the screen\r\n\t\t\tlet row: number = topLeftRow;\r\n\t\t\tconst layerCount: number = this.getLayerCount();\r\n\t\t\tlet tileCount: number = 0;\r\n\t\t\twhile (_y < screenHeight) {\r\n\t\t\t\tfor (let l: number = 0; l < layerCount; l++) {\r\n\r\n\t\t\t\t\tlet col: number = topLeftCol;\r\n\t\t\t\t\t_x = startX;\r\n\r\n\t\t\t\t\tconst layer: TiledLayer = this.getLayerByIndex(l);\r\n\t\t\t\t\tif (layer.visible) {\r\n\r\n\t\t\t\t\t\tlet prevOpacity: number = 1; // Default value needed for strict null checks\r\n\t\t\t\t\t\tif (layer.opacity < 1) {\r\n\t\t\t\t\t\t\tprevOpacity = ctx.globalAlpha;\r\n\t\t\t\t\t\t\tctx.globalAlpha = prevOpacity * layer.opacity;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twhile (_x < screenWidth) {\r\n\t\t\t\t\t\t\tconst value: number = layer.getData(row % rowCount, col % colCount);\r\n\t\t\t\t\t\t\tthis.drawTile(ctx, _x, _y, value, layer);\r\n\t\t\t\t\t\t\ttileCount++;\r\n\t\t\t\t\t\t\t_x += tileW;\r\n\t\t\t\t\t\t\tcol++;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (layer.opacity < 1) {\r\n\t\t\t\t\t\t\tctx.globalAlpha = prevOpacity;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Here we could render sprites in-between layers\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_y += tileH;\r\n\t\t\t\trow++;\r\n\t\t\t}\r\n\r\n\t\t\t//console.log('tileCount === ' + tileCount);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a layer by name.\r\n\t\t * \r\n\t\t * @param {string} name The name of the layer.\r\n\t\t * @return {tiled.TiledLayer} The layer, or null if there is no layer with\r\n\t\t *         that name.\r\n\t\t * @method\r\n\t\t */\r\n\t\tgetLayer(name: string): TiledLayer {\r\n\t\t\treturn this.layersByName[name];\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a layer by index.\r\n\t\t * \r\n\t\t * @param {int} index The index of the layer.\r\n\t\t * @return {tiled.TiledLayer} The layer, or null if there is no layer at\r\n\t\t *         that index.\r\n\t\t * @method\r\n\t\t */\r\n\t\tgetLayerByIndex(index: number): TiledLayer {\r\n\t\t\treturn this.layers[index];\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the number of layers in this map.\r\n\t\t * \r\n\t\t * @return {int} The number of layers in this map.\r\n\t\t */\r\n\t\tgetLayerCount(): number {\r\n\t\t\treturn this.layers.length;\r\n\t\t}\r\n\r\n\t\tprivate _getImageForGid(gid: number): TiledTileset {\r\n\t\t\tconst tilesetCount: number = this.tilesets.length;\r\n\t\t\tfor (let i: number = 0; i < tilesetCount; i++) {\r\n\t\t\t\tif (this.tilesets[i].firstgid > gid) {\r\n\t\t\t\t\treturn this.tilesets[i - 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this.tilesets[tilesetCount - 1];\r\n\t\t}\r\n\r\n\t\tdrawTile(ctx: CanvasRenderingContext2D, x: number, y: number,\r\n\t\t\t\tvalue: number, layer: TiledLayer) {\r\n\r\n\t\t\tif (value <= 0) { // 0 => no tile to draw\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst tileset: TiledTileset = this._getImageForGid(value);\r\n\t\t\tif (!tileset) {\r\n\t\t\t\tconsole.log('null tileset for: ' + value + ' (layer ' + layer.name + ')');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvalue -= tileset.firstgid;\r\n\t\t\tif (value < 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst game: gtp.Game = window.game;\r\n\t\t\tconst img: gtp.Image = game.assets.getTmxTilesetImage(tileset);\r\n\r\n\t\t\tconst tileW: number = this.tileWidth;\r\n\t\t\tconst sw: number = tileW + tileset.spacing;\r\n\t\t\tconst tileH: number = this.tileHeight;\r\n\t\t\tconst sh: number = tileH + tileset.spacing;\r\n\r\n\t\t\t// TODO: \"+ 1\" is based on extra space at end of image.  Should be configured/calculated\r\n\t\t\tlet imgColCount: number = Math.floor(img.width / sw);\r\n\t\t\tif (tileset.spacing > 0 && ((img.width % sw) === tileW)) {\r\n\t\t\t\timgColCount++;\r\n\t\t\t}\r\n\t\t\tconst imgY: number = Math.floor(value / imgColCount) * sh;\r\n\t\t\tconst imgX: number = (value % imgColCount) * sw;\r\n\r\n\t\t\t//ctx.drawImage(img, imgX,imgY,tileW,tileH, x,y,tileW,tileH);\r\n\t\t\timg.drawScaled2(ctx, imgX, imgY, tileW, tileH, x, y, tileW, tileH);\r\n\r\n\t\t}\r\n\r\n\t\tsetScale(scale: number) {\r\n\t\t\tthis.tileWidth *= scale;\r\n\t\t\tthis.tileHeight *= scale;\r\n\t\t\tthis.screenRows = Math.ceil(this.screenHeight / this.tileHeight);\r\n\t\t\tthis.screenCols = Math.ceil(this.screenWidth / this.tileWidth);\r\n\t\t\tconst tilesetCount: number = this.tilesets.length;\r\n\t\t\tfor (let i: number = 0; i < tilesetCount; i++) {\r\n\t\t\t\treturn this.tilesets[i].setScale(scale);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the pixel width of this map.\r\n\t\t * \r\n\t\t * @return {int} The pixel width of this map.\r\n\t\t * @method\r\n\t\t */\r\n\t\tgetPixelWidth(): number {\r\n\t\t\treturn this.colCount * this.tileWidth;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the pixel height of this map.\r\n\t\t * \r\n\t\t * @return {int} The pixel height of this map.\r\n\t\t * @method\r\n\t\t */\r\n\t\tgetPixelHeight(): number {\r\n\t\t\treturn this.rowCount * this.tileHeight;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Removes a layer from this map.\r\n\t\t * @param {string} layerName The name of the layer to remove.\r\n\t\t * @return {boolean} Whether a layer by that name was found.\r\n\t\t * @method\r\n\t\t */\r\n\t\tremoveLayer(layerName: string): boolean {\r\n\t\t\tfor (let i: number = 0; i < this.layers.length; i++) {\r\n\t\t\t\tif (this.layers[i].name === layerName) {\r\n\t\t\t\t\tthis.layers.splice(i, 1);\r\n\t\t\t\t\tdelete this.layersByName[layerName];\r\n\t\t\t\t\tfor (let j: number = 0; j < this.objectGroups.length; j++) {\r\n\t\t\t\t\t\tif (this.objectGroups[j].name === layerName) {\r\n\t\t\t\t\t\t\tdelete this.objectGroups[j];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n}\r\n"]}