{"version":3,"sources":["gtp/Game.ts"],"names":[],"mappings":"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","file":"gtp/Game.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * A base class for a game.\r\n\t *\r\n\t * @constructor\r\n\t */\r\n\texport class Game {\r\n\r\n\t\t/*private */_scale: number;\r\n\t\tcanvas: HTMLCanvasElement;\r\n\t\tinputManager: gtp.InputManager;\r\n\t\t_targetFps: number;\r\n\t\t_interval: number;\r\n\t\tlastTime: number;\r\n\t\taudio: gtp.AudioSystem;\r\n\t\tassets: gtp.AssetLoader;\r\n\t\tclearScreenColor: string;\r\n\t\tfpsColor: string;\r\n\t\tstatusMessageRGB: string;\r\n\t\tprivate _statusMessageColor: string;\r\n\t\tshowFps: boolean;\r\n\t\tframes: number;\r\n\t\tprivate _fpsMsg: string;\r\n\t\tprivate _statusMessage: string;\r\n\t\tprivate _statusMessageAlpha: number;\r\n\t\tprivate _statusMessageTime: number;\r\n\t\tstate: gtp.State;\r\n\t\tprivate _gameTimer: _GameTimer;\r\n\t\ttimer: gtp.Timer;\r\n\r\n\t\tconstructor(args: any = {}) {\r\n\r\n\t\t\tgtp.Utils.initConsole();\r\n\r\n\t\t\tthis._scale = args.scale || 1;\r\n\t\t\tthis.canvas = gtp.ImageUtils.createCanvas(args.width, args.height, args.parent);\r\n\r\n\t\t\tthis.inputManager = new gtp.InputManager(args.keyRefreshMillis || 0);\r\n\t\t\tthis.inputManager.install();\r\n\t\t\tthis._targetFps = args.targetFps || 30;\r\n\t\t\tthis._interval = 1000 / this._targetFps;\r\n\t\t\tthis.lastTime = 0;\r\n\r\n\t\t\tthis.audio = new gtp.AudioSystem();\r\n\t\t\tthis.audio.init();\r\n\t\t\tvar assetPrefix: string = args.assetRoot || null;\r\n\t\t\tthis.assets = new gtp.AssetLoader(this._scale, this.audio, assetPrefix);\r\n\r\n\t\t\tthis.clearScreenColor = 'rgb(0,0,0)';\r\n\r\n\t\t\tthis.fpsColor = 'rgb(255,255,255)';\r\n\t\t\tthis.statusMessageRGB = '255,255,255';\r\n\t\t\tthis._statusMessageColor = null;\r\n\t\t\tthis.showFps = false;\r\n\t\t\tthis.frames = 0;\r\n\t\t\tthis._fpsMsg = this._targetFps + ' fps';\r\n\t\t\tthis._statusMessage = null;\r\n\t\t\tthis._statusMessageAlpha = 0;\r\n\r\n\t\t\tthis._gameTimer = new _GameTimer();\r\n\t\t\tthis.timer = new gtp.Timer();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Clears the screen.\r\n\t\t * @param {string} clearScreenColor The color to clear the screen with.\r\n\t\t *        If unspecified, <code>this.clearScreenColor</code> is used.\r\n\t\t */\r\n\t\tclearScreen(clearScreenColor: string = this.clearScreenColor) {\r\n\t\t\tvar ctx: CanvasRenderingContext2D = this.canvas.getContext('2d');\r\n\t\t\tctx.fillStyle = clearScreenColor;\r\n\t\t\tctx.fillRect(0, 0, this.getWidth(), this.getHeight());\r\n\t\t}\r\n\r\n\t\tgetHeight(): number {\r\n\t\t\treturn this.canvas.height;\r\n\t\t}\r\n\r\n\t\tgetWidth(): number {\r\n\t\t\treturn this.canvas.width;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns whether this game is paused.\r\n\t\t * @return {boolean} Whether this game is paused.\r\n\t\t */\r\n\t\tget paused(): boolean {\r\n\t\t\treturn this._gameTimer.paused;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the length of time the game has been played so far.  This is\r\n\t\t * \"playable time;\" that is, time in which the user is playing, and the\r\n\t\t * game is not paused or in a \"not updating\" state (such as the main\r\n\t\t * frame not having focus).\r\n\t\t *\r\n\t\t * @return The amount of time the game has been played, in milliseconds.\r\n\t\t * @see resetPlayTime\r\n\t\t */\r\n\t\tget playTime(): number {\r\n\t\t\treturn this._gameTimer.playTime;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a random number between <code>0</code> and\r\n\t\t * <code>number</code>, exclusive.\r\n\t\t *\r\n\t\t * @param max {number} The upper bound, exclusive.\r\n\t\t * @return {number} The random number.\r\n\t\t */\r\n\t\trandomInt(max: number): number {\r\n\t\t\tvar min: number = 0;\r\n\t\t\t// Using Math.round() would give a non-uniform distribution!\r\n\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\r\n\t\t}\r\n\r\n\t\trender() {\r\n\r\n\t\t\tvar ctx: CanvasRenderingContext2D = this.canvas.getContext('2d');\r\n\t\t\tthis.state.render(ctx);\r\n\r\n\t\t\tif (this.showFps) {\r\n\t\t\t\tthis._renderFps(ctx);\r\n\t\t\t}\r\n\t\t\tif (this._statusMessage && this._statusMessageAlpha > 0) {\r\n\t\t\t\tthis._renderStatusMessage(ctx);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate _renderFps(ctx: CanvasRenderingContext2D) {\r\n\r\n\t\t\tthis.frames++;\r\n\t\t\tvar now: number = Utils.timestamp();\r\n\t\t\tif (this.lastTime === null) {\r\n\t\t\t\tthis.lastTime = now;\r\n\t\t\t}\r\n\t\t\telse if (now - this.lastTime >= 1000) {\r\n\t\t\t\tthis._fpsMsg = this.frames + ' fps';\r\n\t\t\t\tthis.frames = 0;\r\n\t\t\t\tthis.lastTime = now;\r\n\t\t\t}\r\n\r\n\t\t\tvar x: number = 10;\r\n\t\t\tvar y: number = 15;\r\n\t\t\tctx.font = '10pt Arial';\r\n\t\t\tctx.fillStyle = this.fpsColor;\r\n\t\t\tctx.fillText(this._fpsMsg, x, y);\r\n\r\n\t\t}\r\n\r\n\t\tprivate _renderStatusMessage(ctx: CanvasRenderingContext2D) {\r\n\t\t\tvar x: number = 10;\r\n\t\t\tvar y: number = this.canvas.height - 6;\r\n\t\t\tctx.font = '10pt Arial';\r\n\t\t\tctx.fillStyle = this._statusMessageColor;\r\n\t\t\tctx.fillText(this._statusMessage, x, y);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Resets the \"playtime in milliseconds\" timer back to <code>0</code>.\r\n\t\t *\r\n\t\t * @see playTimeMillis\r\n\t\t */\r\n\t\tresetPlayTime() {\r\n\t\t\tthis._gameTimer.resetPlayTime();\r\n\t\t}\r\n\r\n      /**\r\n       * Sets whether the game is paused.  The game is still told to handle\r\n       * input, update itself and render.  This is simply a flag that should\r\n       * be set whenever a \"pause\" screen is displayed.  It stops the \"in-game\r\n       * timer\" until the game is unpaused.\r\n       *\r\n       * @param paused Whether the game should be paused.\r\n       */\r\n\t\tset paused(paused: boolean) {\r\n\t\t\tif (paused) {\r\n\t\t\t\tthis.audio.pauseAll();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.audio.resumeAll();\r\n\t\t\t}\r\n\t\t\tthis._gameTimer.paused = paused;\r\n\t\t}\r\n\r\n\t\tsetState(state: gtp.State) {\r\n\t\t\tif (this.state) {\r\n\t\t\t\tthis.state.leaving(this);\r\n\t\t\t}\r\n\t\t\tthis.state = state;\r\n\t\t\tthis.state.enter(this);\r\n\t\t}\r\n\r\n\t\tsetStatusMessage(message: string) {\r\n\t\t\tthis._statusMessage = message;\r\n\t\t\tthis._statusMessageAlpha = 2.0; // 1.0 of message, 1.0 of fading out\r\n\t\t\tthis._statusMessageTime = Utils.timestamp() + 100;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Starts the game loop.\r\n\t\t */\r\n\t\tstart() {\r\n\t\t\t// e.g. Dojo's lang.hitch()\r\n\t\t\tvar self: Game = this;\r\n\t\t\tvar callback: Function = function() {\r\n\t\t\t\tself._tick.apply(self);\r\n\t\t\t};\r\n\r\n\t\t\tthis._gameTimer.start();\r\n\t\t\tsetInterval(callback, this._interval);\r\n\t\t}\r\n\r\n\t\tprivate _tick() {\r\n\r\n\t\t\tif (this._statusMessage) {\r\n\t\t\t\tvar time: number = Utils.timestamp();\r\n\t\t\t\tif (time > this._statusMessageTime) {\r\n\t\t\t\t\tthis._statusMessageTime = time + 100;\r\n\t\t\t\t\tthis._statusMessageAlpha -= 0.1;\r\n\t\t\t\t\tvar alpha: number = Math.min(1, this._statusMessageAlpha);\r\n\t\t\t\t\tthis._statusMessageColor = 'rgba(' + this.statusMessageRGB + ',' + alpha + ')';\r\n\t\t\t\t\tif (this._statusMessageAlpha <= 0) {\r\n\t\t\t\t\t\tthis._statusMessage = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.update();\r\n\t\t\tthis.render();\r\n\t\t}\r\n\r\n\t\ttoggleMuted(): boolean {\r\n\t\t\tlet muted: boolean = this.audio.toggleMuted();\r\n\t\t\tthis.setStatusMessage(muted ? 'Audio muted' : 'Audio enabled');\r\n\t\t\treturn muted;\r\n\t\t}\r\n\r\n\t\ttoggleShowFps() {\r\n\t\t\tthis.showFps = !this.showFps;\r\n\t\t\tthis.setStatusMessage('FPS display: ' + (this.showFps ? 'on' : 'off'));\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Called during each tick to update game logic.  The default implementation\r\n\t\t * checks for a shortcut key to toggle the FPS display before delegating to\r\n\t\t * the current game state.  Subclasses can override, but typically update\r\n\t\t * logic is handled by game states.\r\n\t\t */\r\n\t\tupdate() {\r\n\r\n\t\t\tvar im: InputManager = this.inputManager;\r\n\t\t\tif (im.isKeyDown(gtp.Keys.KEY_SHIFT)) {\r\n\r\n\t\t\t\tif (im.isKeyDown(gtp.Keys.KEY_F, true)) {\r\n\t\t\t\t\tthis.toggleShowFps();\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tthis.state.update(this._interval);\r\n\r\n\t\t}\r\n\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}