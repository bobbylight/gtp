{"version":3,"sources":["gtp/Game.ts"],"names":["gtp","gtp.Game","gtp.Game.constructor","gtp.Game.clearScreen","gtp.Game.getHeight","gtp.Game.getWidth","gtp.Game.paused","gtp.Game.playTime","gtp.Game.randomInt","gtp.Game.render","gtp.Game._renderFps","gtp.Game._renderStatusMessage","gtp.Game.resetPlayTime","gtp.Game.setState","gtp.Game.setStatusMessage","gtp.Game.start","gtp.Game._tick","gtp.Game.toggleMuted","gtp.Game.toggleShowFps","gtp.Game.update"],"mappings":"AAAA,IAAO,GAAG,CA0QT;AA1QD,WAAO,GAAG,EAAC,CAAC;IACXA,YAAYA,CAACA;IAEbA;;;;OAIGA;IACHA;QAwBCC,cAAYA,IAAcA;YAAdC,oBAAcA,GAAdA,SAAcA;YAV1BA,YAAOA,GAAYA,IAAIA,CAACA;YACxBA,WAAMA,GAAWA,CAACA,CAACA;YAWlBA,GAAGA,CAACA,KAAKA,CAACA,WAAWA,EAAEA,CAACA;YAExBA,IAAIA,CAACA,MAAMA,GAAGA,IAAIA,CAACA,KAAKA,IAAIA,CAACA,CAACA;YAC9BA,IAAIA,CAACA,MAAMA,GAAGA,GAAGA,CAACA,UAAUA,CAACA,YAAYA,CAACA,IAAIA,CAACA,KAAKA,EAAEA,IAAIA,CAACA,MAAMA,EAAEA,IAAIA,CAACA,MAAMA,CAACA,CAACA;YAEhFA,IAAIA,CAACA,YAAYA,GAAGA,IAAIA,GAAGA,CAACA,YAAYA,CAACA,IAAIA,CAACA,gBAAgBA,IAAIA,CAACA,CAACA,CAACA;YACrEA,IAAIA,CAACA,YAAYA,CAACA,OAAOA,EAAEA,CAACA;YAC5BA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,SAASA,IAAIA,EAAEA,CAACA;YACvCA,IAAIA,CAACA,SAASA,GAAGA,IAAIA,GAAGA,IAAIA,CAACA,UAAUA,CAACA;YACxCA,IAAIA,CAACA,QAAQA,GAAGA,CAACA,CAACA;YAElBA,IAAIA,CAACA,KAAKA,GAAGA,IAAIA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YACnCA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,CAACA;YAClBA,IAAIA,WAAWA,GAAWA,IAAIA,CAACA,SAASA,IAAIA,IAAIA,CAACA;YACjDA,IAAIA,CAACA,MAAMA,GAAGA,IAAIA,GAAGA,CAACA,WAAWA,CAACA,IAAIA,CAACA,MAAMA,EAAEA,IAAIA,CAACA,KAAKA,EAAEA,WAAWA,CAACA,CAACA;YAExEA,IAAIA,CAACA,gBAAgBA,GAAGA,YAAYA,CAACA;YAErCA,IAAIA,CAACA,QAAQA,GAAGA,kBAAkBA,CAACA;YACnCA,IAAIA,CAACA,gBAAgBA,GAAGA,aAAaA,CAACA;YACtCA,IAAIA,CAACA,mBAAmBA,GAAGA,IAAIA,CAACA;YAChCA,IAAIA,CAACA,OAAOA,GAAGA,IAAIA,CAACA;YACpBA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,CAACA;YAChBA,IAAIA,CAACA,OAAOA,GAAGA,IAAIA,CAACA,UAAUA,GAAGA,MAAMA,CAACA;YACxCA,IAAIA,CAACA,cAAcA,GAAGA,IAAIA,CAACA;YAC3BA,IAAIA,CAACA,mBAAmBA,GAAGA,CAACA,CAACA;YAE7BA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,cAAUA,EAAEA,CAACA;YACnCA,IAAIA,CAACA,KAAKA,GAAGA,IAAIA,GAAGA,CAACA,KAAKA,EAAEA,CAACA;QAC9BA,CAACA;QAEDD;;;;WAIGA;QACHA,0BAAWA,GAAXA,UAAYA,gBAAgDA;YAAhDE,gCAAgDA,GAAhDA,mBAA2BA,IAAIA,CAACA,gBAAgBA;YAC3DA,IAAIA,GAAGA,GAA6BA,IAAIA,CAACA,MAAMA,CAACA,UAAUA,CAACA,IAAIA,CAACA,CAACA;YACjEA,GAAGA,CAACA,SAASA,GAAGA,gBAAgBA,CAACA;YACjCA,GAAGA,CAACA,QAAQA,CAACA,CAACA,EAAEA,CAACA,EAAEA,IAAIA,CAACA,QAAQA,EAAEA,EAAEA,IAAIA,CAACA,SAASA,EAAEA,CAACA,CAACA;QACvDA,CAACA;QAEDF,wBAASA,GAATA;YACCG,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,CAACA;QAC3BA,CAACA;QAEDH,uBAAQA,GAARA;YACCI,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,KAAKA,CAACA;QAC1BA,CAACA;QAMDJ,sBAAIA,wBAAMA;YAJVA;;;eAGGA;iBACHA;gBACCK,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA,MAAMA,CAACA;YAC/BA,CAACA;YA+EGL;;;;;;;eAOGA;iBACPA,UAAWA,MAAeA;gBACzBK,EAAEA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA;oBACZA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,EAAEA,CAACA;gBACvBA,CAACA;gBACDA,IAAIA,CAACA,CAACA;oBACLA,IAAIA,CAACA,KAAKA,CAACA,SAASA,EAAEA,CAACA;gBACxBA,CAACA;gBACDA,IAAIA,CAACA,UAAUA,CAACA,MAAMA,GAAGA,MAAMA,CAACA;YACjCA,CAACA;;;WA/FAL;QAWDA,sBAAIA,0BAAQA;YATZA;;;;;;;;eAQGA;iBACHA;gBACCM,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA,QAAQA,CAACA;YACjCA,CAACA;;;WAAAN;QAEDA;;;;;;WAMGA;QACHA,wBAASA,GAATA,UAAUA,GAAWA;YACpBO,IAAIA,GAAGA,GAAWA,CAACA,CAACA;YACpBA,4DAA4DA;YAC5DA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,MAAMA,EAAEA,GAAGA,CAACA,GAAGA,GAAGA,GAAGA,GAAGA,CAACA,CAACA,GAAGA,GAAGA,CAACA,CAACA;QAC1DA,CAACA;QAEDP,qBAAMA,GAANA;YAECQ,IAAIA,GAAGA,GAA6BA,IAAIA,CAACA,MAAMA,CAACA,UAAUA,CAACA,IAAIA,CAACA,CAACA;YACjEA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA;YAEvBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA;gBAClBA,IAAIA,CAACA,UAAUA,CAACA,GAAGA,CAACA,CAACA;YACtBA,CAACA;YACDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,cAAcA,IAAIA,IAAIA,CAACA,mBAAmBA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACzDA,IAAIA,CAACA,oBAAoBA,CAACA,GAAGA,CAACA,CAACA;YAChCA,CAACA;QACFA,CAACA;QAEOR,yBAAUA,GAAlBA,UAAmBA,GAA6BA;YAE/CS,IAAIA,CAACA,MAAMA,EAAEA,CAACA;YACdA,IAAIA,GAAGA,GAAWA,SAAKA,CAACA,SAASA,EAAEA,CAACA;YACpCA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,KAAKA,IAAIA,CAACA,CAACA,CAACA;gBAC5BA,IAAIA,CAACA,QAAQA,GAAGA,GAAGA,CAACA;YACrBA,CAACA;YACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,GAAGA,GAAGA,IAAIA,CAACA,QAAQA,IAAIA,IAAIA,CAACA,CAACA,CAACA;gBACtCA,IAAIA,CAACA,OAAOA,GAAGA,IAAIA,CAACA,MAAMA,GAAGA,MAAMA,CAACA;gBACpCA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,CAACA;gBAChBA,IAAIA,CAACA,QAAQA,GAAGA,GAAGA,CAACA;YACrBA,CAACA;YAEDA,IAAIA,CAACA,GAAWA,EAAEA,CAACA;YACnBA,IAAIA,CAACA,GAAWA,EAAEA,CAACA;YACnBA,GAAGA,CAACA,IAAIA,GAAGA,YAAYA,CAACA;YACxBA,GAAGA,CAACA,SAASA,GAAGA,IAAIA,CAACA,QAAQA,CAACA;YAC9BA,GAAGA,CAACA,QAAQA,CAACA,IAAIA,CAACA,OAAOA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;QAElCA,CAACA;QAEOT,mCAAoBA,GAA5BA,UAA6BA,GAA6BA;YACzDU,IAAIA,CAACA,GAAWA,EAAEA,CAACA;YACnBA,IAAIA,CAACA,GAAWA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,GAAGA,CAACA,CAACA;YACvCA,GAAGA,CAACA,IAAIA,GAAGA,YAAYA,CAACA;YACxBA,GAAGA,CAACA,SAASA,GAAGA,IAAIA,CAACA,mBAAmBA,CAACA;YACzCA,GAAGA,CAACA,QAAQA,CAACA,IAAIA,CAACA,cAAcA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACzCA,CAACA;QAEDV;;;;WAIGA;QACHA,4BAAaA,GAAbA;YACCW,IAAIA,CAACA,UAAUA,CAACA,aAAaA,EAAEA,CAACA;QACjCA,CAACA;QAoBDX,uBAAQA,GAARA,UAASA,KAAgBA;YACxBY,EAAEA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA;gBAChBA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA;YAC1BA,CAACA;YACDA,IAAIA,CAACA,KAAKA,GAAGA,KAAKA,CAACA;YACnBA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,CAACA;QACnBA,CAACA;QAEDZ,+BAAgBA,GAAhBA,UAAiBA,OAAeA;YAC/Ba,IAAIA,CAACA,cAAcA,GAAGA,OAAOA,CAACA;YAC9BA,IAAIA,CAACA,mBAAmBA,GAAGA,GAAGA,CAACA,CAACA,oCAAoCA;YACpEA,IAAIA,CAACA,kBAAkBA,GAAGA,SAAKA,CAACA,SAASA,EAAEA,GAAGA,GAAGA,CAACA;QACnDA,CAACA;QAEDb;;WAEGA;QACHA,oBAAKA,GAALA;YACCc,2BAA2BA;YAC3BA,IAAIA,IAAIA,GAASA,IAAIA,CAACA;YACtBA,IAAIA,QAAQA,GAAaA;gBACxB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC,CAACA;YAEFA,IAAIA,CAACA,UAAUA,CAACA,KAAKA,EAAEA,CAACA;YACxBA,WAAWA,CAACA,QAAQA,EAAEA,IAAIA,CAACA,SAASA,CAACA,CAACA;QACvCA,CAACA;QAEOd,oBAAKA,GAAbA;YAECe,EAAEA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA,CAACA;gBACzBA,IAAIA,IAAIA,GAAWA,SAAKA,CAACA,SAASA,EAAEA,CAACA;gBACrCA,EAAEA,CAACA,CAACA,IAAIA,GAAGA,IAAIA,CAACA,kBAAkBA,CAACA,CAACA,CAACA;oBACpCA,IAAIA,CAACA,kBAAkBA,GAAGA,IAAIA,GAAGA,GAAGA,CAACA;oBACrCA,IAAIA,CAACA,mBAAmBA,IAAIA,GAAGA,CAACA;oBAChCA,IAAIA,KAAKA,GAAWA,IAAIA,CAACA,GAAGA,CAACA,CAACA,EAAEA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA;oBAC1DA,IAAIA,CAACA,mBAAmBA,GAAGA,OAAOA,GAAGA,IAAIA,CAACA,gBAAgBA,GAAGA,GAAGA,GAAGA,KAAKA,GAAGA,GAAGA,CAACA;oBAC/EA,EAAEA,CAACA,CAACA,IAAIA,CAACA,mBAAmBA,IAAIA,CAACA,CAACA,CAACA,CAACA;wBACnCA,IAAIA,CAACA,cAAcA,GAAGA,IAAIA,CAACA;oBAC5BA,CAACA;gBACFA,CAACA;YACFA,CAACA;YAEDA,IAAIA,CAACA,MAAMA,EAAEA,CAACA;YACdA,IAAIA,CAACA,MAAMA,EAAEA,CAACA;QACfA,CAACA;QAECf,0BAAWA,GAAXA;YACEgB,IAAIA,KAAKA,GAAYA,IAAIA,CAACA,KAAKA,CAACA,WAAWA,EAAEA,CAACA;YAC9CA,IAAIA,CAACA,gBAAgBA,CAACA,KAAKA,GAAGA,aAAaA,GAAGA,eAAeA,CAACA,CAACA;YAC/DA,MAAMA,CAACA,KAAKA,CAACA;QACfA,CAACA;QAEHhB,4BAAaA,GAAbA;YACCiB,IAAIA,CAACA,OAAOA,GAAGA,CAACA,IAAIA,CAACA,OAAOA,CAACA;YAC7BA,IAAIA,CAACA,gBAAgBA,CAACA,eAAeA,GAAGA,CAACA,IAAIA,CAACA,OAAOA,GAAGA,IAAIA,GAAGA,KAAKA,CAACA,CAACA,CAACA;QACxEA,CAACA;QAEDjB;;;;;WAKGA;QACHA,qBAAMA,GAANA;YAECkB,IAAIA,EAAEA,GAAiBA,IAAIA,CAACA,YAAYA,CAACA;YACzCA,EAAEA,CAACA,CAACA,EAAEA,CAACA,SAASA,CAACA,GAAGA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA;gBAEtCA,EAAEA,CAACA,CAACA,EAAEA,CAACA,SAASA,CAACA,GAAGA,CAACA,IAAIA,CAACA,KAAKA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACxCA,IAAIA,CAACA,aAAaA,EAAEA,CAACA;gBACtBA,CAACA;YAEFA,CAACA;YACDA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;QAEnCA,CAACA;QAEFlB,WAACA;IAADA,CAjQAD,AAiQCC,IAAAD;IAjQYA,QAAIA,OAiQhBA,CAAAA;AACFA,CAACA,EA1QM,GAAG,KAAH,GAAG,QA0QT","file":"gtp/Game.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * A base class for a game.\r\n\t *\r\n\t * @constructor\r\n\t */\r\n\texport class Game {\r\n\r\n\t\t/*private */_scale: number;\r\n\t\tcanvas: HTMLCanvasElement;\r\n\t\tinputManager: gtp.InputManager;\r\n\t\t_targetFps: number;\r\n\t\t_interval: number;\r\n\t\tlastTime: number;\r\n\t\taudio: gtp.AudioSystem;\r\n\t\tassets: gtp.AssetLoader;\r\n\t\tclearScreenColor: string;\r\n\t\tfpsColor: string;\r\n\t\tstatusMessageRGB: string;\r\n\t\tprivate _statusMessageColor: string;\r\n\t\tshowFps: boolean = true;\r\n\t\tframes: number = 0;\r\n\t\tprivate _fpsMsg: string;\r\n\t\tprivate _statusMessage: string;\r\n\t\tprivate _statusMessageAlpha: number;\r\n\t\tprivate _statusMessageTime: number;\r\n\t\tstate: gtp.State;\r\n\t\tprivate _gameTimer: _GameTimer;\r\n\t\ttimer: gtp.Timer;\r\n\r\n\t\tconstructor(args: any = {}) {\r\n\r\n\t\t\tgtp.Utils.initConsole();\r\n\r\n\t\t\tthis._scale = args.scale || 1;\r\n\t\t\tthis.canvas = gtp.ImageUtils.createCanvas(args.width, args.height, args.parent);\r\n\r\n\t\t\tthis.inputManager = new gtp.InputManager(args.keyRefreshMillis || 0);\r\n\t\t\tthis.inputManager.install();\r\n\t\t\tthis._targetFps = args.targetFps || 30;\r\n\t\t\tthis._interval = 1000 / this._targetFps;\r\n\t\t\tthis.lastTime = 0;\r\n\r\n\t\t\tthis.audio = new gtp.AudioSystem();\r\n\t\t\tthis.audio.init();\r\n\t\t\tvar assetPrefix: string = args.assetRoot || null;\r\n\t\t\tthis.assets = new gtp.AssetLoader(this._scale, this.audio, assetPrefix);\r\n\r\n\t\t\tthis.clearScreenColor = 'rgb(0,0,0)';\r\n\r\n\t\t\tthis.fpsColor = 'rgb(255,255,255)';\r\n\t\t\tthis.statusMessageRGB = '255,255,255';\r\n\t\t\tthis._statusMessageColor = null;\r\n\t\t\tthis.showFps = true;\r\n\t\t\tthis.frames = 0;\r\n\t\t\tthis._fpsMsg = this._targetFps + ' fps';\r\n\t\t\tthis._statusMessage = null;\r\n\t\t\tthis._statusMessageAlpha = 0;\r\n\r\n\t\t\tthis._gameTimer = new _GameTimer();\r\n\t\t\tthis.timer = new gtp.Timer();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Clears the screen.\r\n\t\t * @param {string} clearScreenColor The color to clear the screen with.\r\n\t\t *        If unspecified, <code>this.clearScreenColor</code> is used.\r\n\t\t */\r\n\t\tclearScreen(clearScreenColor: string = this.clearScreenColor) {\r\n\t\t\tvar ctx: CanvasRenderingContext2D = this.canvas.getContext('2d');\r\n\t\t\tctx.fillStyle = clearScreenColor;\r\n\t\t\tctx.fillRect(0, 0, this.getWidth(), this.getHeight());\r\n\t\t}\r\n\r\n\t\tgetHeight(): number {\r\n\t\t\treturn this.canvas.height;\r\n\t\t}\r\n\r\n\t\tgetWidth(): number {\r\n\t\t\treturn this.canvas.width;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns whether this game is paused.\r\n\t\t * @return {boolean} Whether this game is paused.\r\n\t\t */\r\n\t\tget paused(): boolean {\r\n\t\t\treturn this._gameTimer.paused;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the length of time the game has been played so far.  This is\r\n\t\t * \"playable time;\" that is, time in which the user is playing, and the\r\n\t\t * game is not paused or in a \"not updating\" state (such as the main\r\n\t\t * frame not having focus).\r\n\t\t *\r\n\t\t * @return The amount of time the game has been played, in milliseconds.\r\n\t\t * @see resetPlayTime\r\n\t\t */\r\n\t\tget playTime(): number {\r\n\t\t\treturn this._gameTimer.playTime;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a random number between <code>0</code> and\r\n\t\t * <code>number</code>, exclusive.\r\n\t\t *\r\n\t\t * @param max {number} The upper bound, exclusive.\r\n\t\t * @return {number} The random number.\r\n\t\t */\r\n\t\trandomInt(max: number): number {\r\n\t\t\tvar min: number = 0;\r\n\t\t\t// Using Math.round() would give a non-uniform distribution!\r\n\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\r\n\t\t}\r\n\r\n\t\trender() {\r\n\r\n\t\t\tvar ctx: CanvasRenderingContext2D = this.canvas.getContext('2d');\r\n\t\t\tthis.state.render(ctx);\r\n\r\n\t\t\tif (this.showFps) {\r\n\t\t\t\tthis._renderFps(ctx);\r\n\t\t\t}\r\n\t\t\tif (this._statusMessage && this._statusMessageAlpha > 0) {\r\n\t\t\t\tthis._renderStatusMessage(ctx);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate _renderFps(ctx: CanvasRenderingContext2D) {\r\n\r\n\t\t\tthis.frames++;\r\n\t\t\tvar now: number = Utils.timestamp();\r\n\t\t\tif (this.lastTime === null) {\r\n\t\t\t\tthis.lastTime = now;\r\n\t\t\t}\r\n\t\t\telse if (now - this.lastTime >= 1000) {\r\n\t\t\t\tthis._fpsMsg = this.frames + ' fps';\r\n\t\t\t\tthis.frames = 0;\r\n\t\t\t\tthis.lastTime = now;\r\n\t\t\t}\r\n\r\n\t\t\tvar x: number = 10;\r\n\t\t\tvar y: number = 15;\r\n\t\t\tctx.font = '10pt Arial';\r\n\t\t\tctx.fillStyle = this.fpsColor;\r\n\t\t\tctx.fillText(this._fpsMsg, x, y);\r\n\r\n\t\t}\r\n\r\n\t\tprivate _renderStatusMessage(ctx: CanvasRenderingContext2D) {\r\n\t\t\tvar x: number = 10;\r\n\t\t\tvar y: number = this.canvas.height - 6;\r\n\t\t\tctx.font = '10pt Arial';\r\n\t\t\tctx.fillStyle = this._statusMessageColor;\r\n\t\t\tctx.fillText(this._statusMessage, x, y);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Resets the \"playtime in milliseconds\" timer back to <code>0</code>.\r\n\t\t *\r\n\t\t * @see playTimeMillis\r\n\t\t */\r\n\t\tresetPlayTime() {\r\n\t\t\tthis._gameTimer.resetPlayTime();\r\n\t\t}\r\n\r\n      /**\r\n       * Sets whether the game is paused.  The game is still told to handle\r\n       * input, update itself and render.  This is simply a flag that should\r\n       * be set whenever a \"pause\" screen is displayed.  It stops the \"in-game\r\n       * timer\" until the game is unpaused.\r\n       *\r\n       * @param paused Whether the game should be paused.\r\n       */\r\n\t\tset paused(paused: boolean) {\r\n\t\t\tif (paused) {\r\n\t\t\t\tthis.audio.pauseAll();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.audio.resumeAll();\r\n\t\t\t}\r\n\t\t\tthis._gameTimer.paused = paused;\r\n\t\t}\r\n\r\n\t\tsetState(state: gtp.State) {\r\n\t\t\tif (this.state) {\r\n\t\t\t\tthis.state.leaving(this);\r\n\t\t\t}\r\n\t\t\tthis.state = state;\r\n\t\t\tthis.state.init();\r\n\t\t}\r\n\r\n\t\tsetStatusMessage(message: string) {\r\n\t\t\tthis._statusMessage = message;\r\n\t\t\tthis._statusMessageAlpha = 2.0; // 1.0 of message, 1.0 of fading out\r\n\t\t\tthis._statusMessageTime = Utils.timestamp() + 100;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Starts the game loop.\r\n\t\t */\r\n\t\tstart() {\r\n\t\t\t// e.g. Dojo's lang.hitch()\r\n\t\t\tvar self: Game = this;\r\n\t\t\tvar callback: Function = function() {\r\n\t\t\t\tself._tick.apply(self);\r\n\t\t\t};\r\n\r\n\t\t\tthis._gameTimer.start();\r\n\t\t\tsetInterval(callback, this._interval);\r\n\t\t}\r\n\r\n\t\tprivate _tick() {\r\n\r\n\t\t\tif (this._statusMessage) {\r\n\t\t\t\tvar time: number = Utils.timestamp();\r\n\t\t\t\tif (time > this._statusMessageTime) {\r\n\t\t\t\t\tthis._statusMessageTime = time + 100;\r\n\t\t\t\t\tthis._statusMessageAlpha -= 0.1;\r\n\t\t\t\t\tvar alpha: number = Math.min(1, this._statusMessageAlpha);\r\n\t\t\t\t\tthis._statusMessageColor = 'rgba(' + this.statusMessageRGB + ',' + alpha + ')';\r\n\t\t\t\t\tif (this._statusMessageAlpha <= 0) {\r\n\t\t\t\t\t\tthis._statusMessage = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.update();\r\n\t\t\tthis.render();\r\n\t\t}\r\n\r\n    toggleMuted(): boolean {\r\n      var muted: boolean = this.audio.toggleMuted();\r\n      this.setStatusMessage(muted ? 'Audio muted' : 'Audio enabled');\r\n      return muted;\r\n    }\r\n\r\n\t\ttoggleShowFps() {\r\n\t\t\tthis.showFps = !this.showFps;\r\n\t\t\tthis.setStatusMessage('FPS display: ' + (this.showFps ? 'on' : 'off'));\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Called during each tick to update game logic.  The default implementation\r\n\t\t * checks for a shortcut key to toggle the FPS display before delegating to\r\n\t\t * the current game state.  Subclasses can override, but typically update\r\n\t\t * logic is handled by game states.\r\n\t\t */\r\n\t\tupdate() {\r\n\r\n\t\t\tvar im: InputManager = this.inputManager;\r\n\t\t\tif (im.isKeyDown(gtp.Keys.KEY_SHIFT)) {\r\n\r\n\t\t\t\tif (im.isKeyDown(gtp.Keys.KEY_F, true)) {\r\n\t\t\t\t\tthis.toggleShowFps();\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tthis.state.update(this._interval);\r\n\r\n\t\t}\r\n\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}