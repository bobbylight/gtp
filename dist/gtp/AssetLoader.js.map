{"version":3,"sources":["gtp/AssetLoader.ts"],"names":[],"mappings":"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","file":"gtp/AssetLoader.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\tinterface ResourceType {\r\n\t\ttype: gtp.AssetType;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads resources for a game.  All games have to load resources such as\r\n\t * images, sound effects, JSON data, sprite sheets, etc.  This class provides\r\n\t * a wrapper around the loading of such resources, as well as a callback\r\n\t * mechanism to know when loading completes.  Games can use this class in a\r\n\t * \"loading\" state, for example.<p>\r\n\t *\r\n\t * Currently supported resources include:\r\n\t * <ul>\r\n\t *   <li>Images\r\n\t *   <li>Sound effects\r\n\t *   <li>JSON data\r\n\t *   <li>Sprite sheets\r\n\t *   <li>TMX maps\r\n\t * </ul>\r\n\t */\r\n\texport class AssetLoader {\r\n\r\n\t\tprivate _scale: number;\r\n\t\tprivate loadingAssetData: { [id: string]: ResourceType };\r\n\t\tprivate responses: { [id: string]: any };\r\n\t\tprivate callback: any;\r\n\t\taudio: gtp.AudioSystem;\r\n\t\tprivate _assetRoot: string;\r\n\t\tprivate nextCallback: Function;\r\n\r\n\t\t/**\r\n\t\t * Provides methods to load images, sounds, and Tiled maps.\r\n\t\t *\r\n\t\t * @param {number} scale How much to scale image resources.\r\n\t\t * @param {gtp.AudioSystem} audio A web audio context.\r\n\t\t * @param {string} [assetRoot] If specified, this is the implicit root\r\n\t\t *        directory for all assets to load.  Use this if all assets are\r\n\t\t *        in a subfolder or different hierarchy than the project itself.\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tconstructor(scale: number = 1, audio: gtp.AudioSystem, assetRoot?: string) {\r\n\t\t\tthis._scale = scale || 1;\r\n\t\t\tthis.loadingAssetData = {};\r\n\t\t\tthis.responses = {};\r\n\t\t\tthis.callback = null;\r\n\t\t\tthis.audio = audio;\r\n\t\t\tthis._assetRoot = assetRoot;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Starts loading a JSON resource.\r\n\t\t * @param {string} id The ID to use when retrieving this resource.\r\n\t\t * @param {string} [url=id] The URL of the resource, defaulting to\r\n\t\t *        {@code id} if not specified.\r\n\t\t */\r\n\t\taddJson(id: string, url: string = id) {\r\n\r\n\t\t\tif (this._assetRoot) {\r\n\t\t\t\turl = this._assetRoot + url;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._isAlreadyTracked(id)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.loadingAssetData[id] = { type: gtp.AssetType.JSON };\r\n\t\t\tconsole.log('Adding: ' + id + ' => ' + url +\r\n\t\t\t\t', remaining == ' + gtp.Utils.getObjectSize(this.loadingAssetData) +\r\n\t\t\t\t', callback == ' + (this.callback !== null));\r\n\r\n\t\t\tconst xhr: XMLHttpRequest = new XMLHttpRequest();\r\n\t\t\txhr.onreadystatechange = () => {\r\n\t\t\t\tif (xhr.readyState === 4) {\r\n\t\t\t\t\tconst response: string = xhr.responseText;\r\n\t\t\t\t\tthis._completed(id, response);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\txhr.open('GET', url, true);\r\n\t\t\txhr.send(null);\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Starts loading a canvas resource.\r\n\t\t * @param {string} id The ID to use when retrieving this resource.\r\n\t\t * @param {string} imageSrc The URL of the resource.\r\n\t\t */\r\n\t\taddCanvas(id: string, imageSrc: string) {\r\n\r\n\t\t\tif (this._assetRoot) {\r\n\t\t\t\timageSrc = this._assetRoot + imageSrc;\r\n\t\t\t}\r\n\r\n\t\t\tconst self: AssetLoader = this;\r\n\r\n\t\t\tconst  image: HTMLImageElement = document.createElement('img'); //new Image();\r\n\t\t\tif (this._isAlreadyTracked(id)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.loadingAssetData[id] = { type: gtp.AssetType.IMAGE };\r\n\t\t\tconsole.log('Adding: ' + id + ' => ' + imageSrc +\r\n\t\t\t\t', remaining == ' + gtp.Utils.getObjectSize(this.loadingAssetData) +\r\n\t\t\t\t', callback == ' + (this.callback !== null));\r\n\t\t\timage.addEventListener('load', () => {\r\n\t\t\t\tconst canvas: HTMLCanvasElement = gtp.ImageUtils.resize(image, self._scale);\r\n\t\t\t\tself._completed(id, canvas);\r\n\t\t\t});\r\n\r\n\t\t\timage.src = imageSrc;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Starts loading an image resource.\r\n\t\t * @param {string} id The ID to use when retrieving this resource.\r\n\t\t * @param {string} imageSrc The URL of the resource.\r\n\t\t * @param {boolean} firstPixelTranslucent If truthy, the pixel at (0, 0)\r\n\t\t *        is made translucent, along with all other pixels of the same\r\n\t\t *        color.  The default value is <code>false</code>.\r\n\t\t */\r\n\t\taddImage(id: string, imageSrc: string,\r\n\t\t\t\tfirstPixelTranslucent: boolean = false) {\r\n\r\n\t\t\tif (this._assetRoot) {\r\n\t\t\t\timageSrc = this._assetRoot + imageSrc;\r\n\t\t\t}\r\n\r\n\t\t\tconst self: AssetLoader = this;\r\n\r\n\t\t\tconst image: HTMLImageElement = document.createElement('img'); //new Image();\r\n\t\t\tif (this._isAlreadyTracked(id)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.loadingAssetData[id] = { type: gtp.AssetType.IMAGE };\r\n\t\t\tconsole.log('Adding: ' + id + ' => ' + imageSrc +\r\n\t\t\t\t', remaining == ' + gtp.Utils.getObjectSize(this.loadingAssetData) +\r\n\t\t\t\t', callback == ' + (this.callback !== null));\r\n\t\t\timage.addEventListener('load', () => {\r\n\t\t\t\tconst canvas: HTMLCanvasElement = gtp.ImageUtils.resize(image, self._scale);\r\n\t\t\t\tconst gtpImage: gtp.Image = new gtp.Image(canvas);\r\n\t\t\t\tif (firstPixelTranslucent) {\r\n\t\t\t\t\tgtpImage.makeColorTranslucent(0, 0);\r\n\t\t\t\t}\r\n\t\t\t\tself._completed(id, gtpImage);\r\n\t\t\t});\r\n\r\n\t\t\timage.src = imageSrc;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Starts loading a sound resource.\r\n\t\t * @param {string} id The ID to use when retrieving this resource.\r\n\t\t * @param {string} soundSrc The URL of the resource.\r\n\t\t * @param {number} [loopStart=0] Where to start, in seconds, if/when this\r\n\t\t *        sound loops (which is typical when using a sound as music).\r\n\t\t * @param {boolean} [loopByDefaultIfMusic=true] Whether this sound should\r\n\t\t *        loop by default when it is played as music.\r\n\t\t */\r\n\t\taddSound(id: string, soundSrc: string, loopStart: number = 0,\r\n\t\t\t\tloopByDefaultIfMusic: boolean = true) {\r\n\r\n\t\t\tif (this.audio.isInitialized()) {\r\n\r\n\t\t\t\tif (this._isAlreadyTracked(id)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.loadingAssetData[id] = { type: gtp.AssetType.AUDIO };\r\n\r\n\t\t\t\tif (this._assetRoot) {\r\n\t\t\t\t\tsoundSrc = this._assetRoot + soundSrc;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst xhr: XMLHttpRequest = new XMLHttpRequest();\r\n\t\t\t\txhr.onload = () => {\r\n\t\t\t\t\t// TODO: Clean up this API\r\n\t\t\t\t\tthis.audio.context.decodeAudioData(xhr.response, (buffer: AudioBuffer) => {\r\n\t\t\t\t\t\tconst sound: gtp.Sound = new gtp.Sound(id, buffer, loopStart || 0);\r\n\t\t\t\t\t\tif (typeof loopByDefaultIfMusic !== 'undefined') {\r\n\t\t\t\t\t\t\tsound.setLoopsByDefaultIfMusic(loopByDefaultIfMusic);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.audio.addSound(sound);\r\n\t\t\t\t\t\tthis._completed(id, buffer);\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\txhr.open('GET', soundSrc, true);\r\n\t\t\t\txhr.responseType = 'arraybuffer';\r\n\t\t\t\txhr.send(null);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Starts loading a sprite sheet resource.\r\n\t\t * @param {string} id The ID to use when retrieving this resource.\r\n\t\t * @param {string} imageSrc The URL of the resource.\r\n\t\t * @param {int} cellW The width of a cell.\r\n\t\t * @param {int} cellH The height of a cell.\r\n\t\t * @param {int} spacingX The horizontal spacing between cells.  Assumed to\r\n\t\t *        be 0 if not defined.\r\n\t\t * @param {int} spacingY The vertical spacing between cells.  Assumed to\r\n\t\t *        be 0 if not defined.\r\n\t\t * @param {boolean} firstPixelTranslucent If truthy, the pixel at (0, 0)\r\n\t\t *        is made translucent, along with all other pixels of the same color.\r\n\t\t */\r\n\t\taddSpriteSheet(id: string, imageSrc: string, cellW: number, cellH: number,\r\n\t\t\t\tspacingX: number = 0, spacingY: number = 0,\r\n\t\t\t\tfirstPixelTranslucent: boolean = false) {\r\n\r\n\t\t\tconst self: AssetLoader = this;\r\n\t\t\tspacingX = spacingX || 0;\r\n\t\t\tspacingY = spacingY || 0;\r\n\t\t\tcellW *= self._scale;\r\n\t\t\tcellH *= self._scale;\r\n\t\t\tspacingX *= self._scale;\r\n\t\t\tspacingY *= self._scale;\r\n\r\n\t\t\tif (this._assetRoot) {\r\n\t\t\t\timageSrc = this._assetRoot + imageSrc;\r\n\t\t\t}\r\n\r\n\t\t\tconst image: HTMLImageElement = document.createElement('img'); //new Image();\r\n\t\t\tif (this._isAlreadyTracked(id)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.loadingAssetData[id] = { type: gtp.AssetType.IMAGE };\r\n\t\t\tconsole.log('Adding: ' + id + ' => ' + imageSrc +\r\n\t\t\t\t', remaining == ' + gtp.Utils.getObjectSize(this.loadingAssetData) +\r\n\t\t\t\t', callback == ' + (this.callback !== null));\r\n\t\t\timage.addEventListener('load', () => {\r\n\t\t\t\tconst canvas: HTMLCanvasElement = gtp.ImageUtils.resize(image, self._scale);\r\n\t\t\t\tconst gtpImage: gtp.Image = new gtp.Image(canvas);\r\n\t\t\t\tif (firstPixelTranslucent) {\r\n\t\t\t\t\tgtpImage.makeColorTranslucent(0, 0);\r\n\t\t\t\t}\r\n\t\t\t\tconst ss: SpriteSheet = new gtp.SpriteSheet(gtpImage, cellW, cellH, spacingX, spacingY);\r\n\t\t\t\tself._completed(id, ss);\r\n\t\t\t});\r\n\r\n\t\t\timage.src = imageSrc;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Registers all images needed by the TMX map's tilesets to this asset\r\n\t\t * loader.\r\n\t\t *\r\n\t\t * @param {tiled.TiledMap} map The Tiled map.\r\n\t\t */\r\n\t\taddTmxMap(map: tiled.TiledMap) {\r\n\t\t\tif (map.tilesets && map.tilesets.length) {\r\n\t\t\t\tfor (let i: number = 0; i < map.tilesets.length; i++) {\r\n\t\t\t\t\tconst tileset: tiled.TiledTileset = map.tilesets[i];\r\n\t\t\t\t\tconst id: string = '_tilesetImage_' + tileset.name;\r\n\t\t\t\t\tthis.addImage(id, tileset.image);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the image corresponding to a Tiled tileset.  This method is\r\n\t\t * called by the library and is typically not called directly by the\r\n\t\t * application.\r\n\t\t *\r\n\t\t * @param {tiled.TiledTileset} tileset The tile set.\r\n\t\t * @return {gtp.Image} The tileset image.\r\n\t\t */\r\n\t\tgetTmxTilesetImage(tileset: tiled.TiledTileset): gtp.Image {\r\n\t\t\treturn this.responses['_tilesetImage_' + tileset.name];\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Retrieves a resource by ID.\r\n\t\t * @param {string} res The ID of the resource.\r\n\t\t * @return The resource, or null if not found.\r\n\t\t */\r\n\t\tget(res: string): any {\r\n\t\t\treturn this.responses[res];\r\n\t\t}\r\n\r\n\t\t_isAlreadyTracked(id: string) {\r\n\t\t\tif (this.loadingAssetData[id]) {\r\n\t\t\t\tconsole.log('A resource with id ' + id + ' is already loading.  Assuming they are the same');\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse if (this.responses[id]) {\r\n\t\t\t\tconsole.log('A resource with id ' + id + ' has already been loaded.');\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Adds a resource.\r\n\t\t * @param {string} res The ID for the resource.\r\n\t\t * @param {any} value The resource value.\r\n\t\t */\r\n\t\tset(res: string, value: any) {\r\n\t\t\tthis.responses[res] = value;\r\n\t\t}\r\n\r\n\t\t_completed(res: string, response: any) {\r\n\t\t\tif (!this.loadingAssetData[res]) {\r\n\t\t\t\tconsole.error('Resource not found! - ' + res);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (this.loadingAssetData[res].type === gtp.AssetType.JSON) {\r\n\t\t\t\tresponse = JSON.parse(response);\r\n\t\t\t}\r\n\t\t\tthis.responses[res] = response;\r\n\t\t\tdelete this.loadingAssetData[res];\r\n\t\t\tconsole.log('Completed: ' + res + ', remaining == ' +\r\n\t\t\t\t\tgtp.Utils.getObjectSize(this.loadingAssetData) +\r\n\t\t\t\t\t', callback == ' + (this.callback !== null));\r\n\t\t\tif (this.isDoneLoading() && this.callback) {\r\n\t\t\t\tthis.callback.call();\r\n\t\t\t\tdelete this.callback;\r\n\t\t\t\tconsole.log('... Callback called and deleted (callback == ' + (this.callback !== null) + ')');\r\n\t\t\t\tif (this.nextCallback) {\r\n\t\t\t\t\tthis.callback = this.nextCallback;\r\n\t\t\t\t\tdelete this.nextCallback;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconsole.log('... Not running callback - ' + this.isDoneLoading() + ', ' + (this.callback !== null));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns whether all assets in thie loader have successfully loaded.\r\n\t\t *\r\n\t\t * @return {boolean} Whether all assets have loaded.\r\n\t\t */\r\n\t\tisDoneLoading(): boolean {\r\n\t\t\treturn gtp.Utils.getObjectSize(this.loadingAssetData) === 0;\r\n\t\t}\r\n\r\n\t\tonLoad(callback: Function) {\r\n\r\n\t\t\tif (this.isDoneLoading()) {\r\n\t\t\t\tcallback();\r\n\t\t\t}\r\n\t\t\telse if (this.callback) { // A new callback added from another callback\r\n\t\t\t\tthis.nextCallback = callback;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.callback = callback;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}