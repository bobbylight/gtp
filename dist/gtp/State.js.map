{"version":3,"sources":["gtp/State.ts"],"names":["gtp","gtp.State","gtp.State.constructor","gtp.State.enter","gtp.State.leaving","gtp.State.update","gtp.State.render"],"mappings":"AAAA,IAAO,GAAG,CA4ET;AA5ED,WAAO,GAAG,EAAC,CAAC;IACXA,YAAYA,CAACA;IASbA;;;;OAIGA;IACHA;QAICC;;;;;;WAMGA;QACHA,eAAYA,IAAyBA;YACpCC,EAAEA,CAACA,CAACA,IAAIA,YAAYA,QAAIA,CAACA,CAACA,CAACA;gBAC1BA,IAAIA,CAACA,IAAIA,GAAGA,IAAIA,CAACA;YAClBA,CAACA;YACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBACfA,IAAIA,CAACA,IAAIA,GAAmBA,IAAKA,CAACA,IAAIA,CAACA;YACxCA,CAACA;YACDA,IAAIA,CAACA,CAACA;gBACLA,IAAIA,CAACA,IAAIA,GAAGA,MAAMA,CAACA,IAAIA,CAACA;YACzBA,CAACA;QACFA,CAACA;QAEDD;;;;;WAKGA;QACHA,qBAAKA,GAALA,UAAMA,IAAUA;YACfE,0BAA0BA;QAC3BA,CAACA;QAEDF;;;;WAIGA;QACHA,uBAAOA,GAAPA,UAAQA,IAAUA;QAClBG,CAACA;QAEDH;;;;;WAKGA;QACHA,sBAAMA,GAANA,UAAOA,KAAaA;YACnBI,6BAA6BA;QAC9BA,CAACA;QAEDJ;;;;WAIGA;QACHA,sBAAMA,GAANA,UAAOA,GAA6BA;YACnCK,6BAA6BA;QAC9BA,CAACA;QACFL,YAACA;IAADA,CA3DAD,AA2DCC,IAAAD;IA3DYA,SAAKA,QA2DjBA,CAAAA;AAEFA,CAACA,EA5EM,GAAG,KAAH,GAAG,QA4ET","file":"gtp/State.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Arguments to pass to a state's constructor.\r\n\t */\r\n\texport interface BaseStateArgs {\r\n\t\tgame: gtp.Game;\r\n\t}\r\n\r\n\t/**\r\n\t * A base class for game states.  Basically just an interface with callbacks\r\n\t * for updating and rendering, along with other lifecycle-ish methods.\r\n\t * @class\r\n\t */\r\n\texport class State {\r\n\r\n\t\tgame: gtp.Game;\r\n\r\n\t\t/**\r\n\t\t * A base class for game states.  Basically just an interface with callbacks\r\n\t\t * for updating and rendering, along with other lifecycle-ish methods.\r\n\t\t * @class\r\n\t\t * @constructor\r\n\t\t * @param args Arguments to the game state.\r\n\t\t */\r\n\t\tconstructor(args?: Game|BaseStateArgs) {\r\n\t\t\tif (args instanceof Game) {\r\n\t\t\t\tthis.game = args;\r\n\t\t\t}\r\n\t\t\telse if (args) {\r\n\t\t\t\tthis.game = (<BaseStateArgs>args).game;\r\n\t\t\t}\r\n\t\t\telse { // Default to global game object\r\n\t\t\t\tthis.game = window.game;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Called right before a state starts.  Subclasses can do any needed\r\n\t\t * initialization here.\r\n\t\t * @param {Game} game The game being played.\r\n\t\t * @see leaving\r\n\t\t */\r\n\t\tenter(game: Game) {\r\n\t\t\t// Subclasses can override\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Called when this state is being left for another one.\r\n\t\t * @param {Game} game The game being played.\r\n\t\t * @see enter\r\n\t\t */\r\n\t\tleaving(game: Game) {\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Subclasses should override this method to do necessary update logic.\r\n\t\t *\r\n\t\t * @param {float} delta The amount of time that has elapsed since the last\r\n\t\t *        frame/call to this method.\r\n\t\t */\r\n\t\tupdate(delta: number) {\r\n\t\t\t// Subclasses should override\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Subclasses should override this method to render the screen.\r\n\t\t *\r\n\t\t * @param {CanvasRenderingContext2D} ctx The graphics context to render onto.\r\n\t\t */\r\n\t\trender(ctx: CanvasRenderingContext2D) {\r\n\t\t\t// Subclasses should override\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":"/source/"}