{"version":3,"sources":["../src/gtp/State.ts"],"names":[],"mappings":"AAAA,IAAO,GAAG,CA4ET;AA5ED,WAAO,GAAG,EAAC,CAAC;IACX,YAAY,CAAC;IASb;;;;OAIG;IACH;QAIC;;;;;;WAMG;QACH,eAAY,IAAyB;YACpC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,YAAY,QAAI,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YAClB,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,IAAI,GAAmB,IAAK,CAAC,IAAI,CAAC;YACxC,CAAC;YACD,IAAI,CAAC,CAAC;gBACL,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACzB,CAAC;QACF,CAAC;QAED;;;;;WAKG;QACH,qBAAK,GAAL,UAAM,IAAU;YACf,0BAA0B;QAC3B,CAAC;QAED;;;;WAIG;QACH,uBAAO,GAAP,UAAQ,IAAU;QAClB,CAAC;QAED;;;;;WAKG;QACH,sBAAM,GAAN,UAAO,KAAa;YACnB,6BAA6B;QAC9B,CAAC;QAED;;;;WAIG;QACH,sBAAM,GAAN,UAAO,GAA6B;YACnC,6BAA6B;QAC9B,CAAC;QACF,YAAC;IAAD,CA3DA,AA2DC,IAAA;IA3DY,SAAK,QA2DjB,CAAA;AAEF,CAAC,EA5EM,GAAG,KAAH,GAAG,QA4ET","file":"State.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Arguments to pass to a state's constructor.\r\n\t */\r\n\texport interface BaseStateArgs {\r\n\t\tgame: gtp.Game;\r\n\t}\r\n\r\n\t/**\r\n\t * A base class for game states.  Basically just an interface with callbacks\r\n\t * for updating and rendering, along with other lifecycle-ish methods.\r\n\t * @class\r\n\t */\r\n\texport class State {\r\n\r\n\t\tgame: gtp.Game;\r\n\r\n\t\t/**\r\n\t\t * A base class for game states.  Basically just an interface with callbacks\r\n\t\t * for updating and rendering, along with other lifecycle-ish methods.\r\n\t\t * @class\r\n\t\t * @constructor\r\n\t\t * @param args Arguments to the game state.\r\n\t\t */\r\n\t\tconstructor(args?: Game|BaseStateArgs) {\r\n\t\t\tif (args && args instanceof Game) {\r\n\t\t\t\tthis.game = args;\r\n\t\t\t}\r\n\t\t\telse if (args) {\r\n\t\t\t\tthis.game = (<BaseStateArgs>args).game;\r\n\t\t\t}\r\n\t\t\telse { // Default to global game object\r\n\t\t\t\tthis.game = window.game;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Called right before a state starts.  Subclasses can do any needed\r\n\t\t * initialization here.\r\n\t\t * @param {Game} game The game being played.\r\n\t\t * @see leaving\r\n\t\t */\r\n\t\tenter(game: Game) {\r\n\t\t\t// Subclasses can override\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Called when this state is being left for another one.\r\n\t\t * @param {Game} game The game being played.\r\n\t\t * @see enter\r\n\t\t */\r\n\t\tleaving(game: Game) {\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Subclasses should override this method to do necessary update logic.\r\n\t\t *\r\n\t\t * @param {number} delta The amount of time that has elapsed since the last\r\n\t\t *        frame/call to this method, as a floating point number.\r\n\t\t */\r\n\t\tupdate(delta: number) {\r\n\t\t\t// Subclasses should override\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Subclasses should override this method to render the screen.\r\n\t\t *\r\n\t\t * @param {CanvasRenderingContext2D} ctx The graphics context to render onto.\r\n\t\t */\r\n\t\trender(ctx: CanvasRenderingContext2D) {\r\n\t\t\t// Subclasses should override\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"]}