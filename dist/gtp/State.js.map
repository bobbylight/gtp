{"version":3,"sources":["gtp/State.ts"],"names":["gtp","gtp.State","gtp.State.constructor","gtp.State.init","gtp.State.leaving","gtp.State.update","gtp.State.render"],"mappings":"AAAA,IAAO,GAAG,CA+DT;AA/DD,WAAO,GAAG,EAAC,CAAC;IACRA,YAAYA,CAACA;IAMbA;QAIFC;;;;;WAKGA;QACGA,eAAYA,IAA6BA;YACrCC,EAAEA,CAACA,CAACA,IAAIA,YAAYA,GAAGA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBAC5BA,IAAIA,CAACA,IAAIA,GAAGA,IAAIA,CAACA;YACpBA,CAACA;YACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBACbA,IAAIA,CAACA,IAAIA,GAAmBA,IAAKA,CAACA,IAAIA,CAACA;YAC1CA,CAACA;YACDA,IAAIA,CAACA,CAACA;gBACFA,IAAIA,CAACA,IAAIA,GAAGA,MAAMA,CAACA,IAAIA,CAACA;YAC5BA,CAACA;QACLA,CAACA;QAEDD;;;WAGGA;QACHA,oBAAIA,GAAJA;YACIE,0BAA0BA;QAC9BA,CAACA;QAEDF;;WAEGA;QACHA,uBAAOA,GAAPA,UAAQA,IAASA;QACjBG,CAACA;QAEDH;;;;;WAKGA;QACHA,sBAAMA,GAANA,UAAOA,KAAaA;YAChBI,6BAA6BA;QACjCA,CAACA;QAEDJ;;;;WAIGA;QACHA,sBAAMA,GAANA,UAAOA,GAA6BA;YAChCK,6BAA6BA;QACjCA,CAACA;QACLL,YAACA;IAADA,CAtDAD,AAsDCC,IAAAD;IAtDYA,SAAKA,QAsDjBA,CAAAA;AAELA,CAACA,EA/DM,GAAG,KAAH,GAAG,QA+DT","file":"gtp/State.js","sourcesContent":["module gtp {\r\n    'use strict';\r\n\r\n    interface BaseStateArgs {\r\n        game: gtp.Game;\r\n    }\r\n\r\n    export class State {\r\n\r\n        game: gtp.Game;\r\n\r\n\t\t/**\r\n\t\t * A base class for game states.  Basically just an interface with callbacks\r\n\t\t * for updating and rendering, along with other lifecycle-ish methods.\r\n\t\t * \r\n\t\t * @constructor\r\n\t\t */\r\n        constructor(args?: gtp.Game|BaseStateArgs) {\r\n            if (args instanceof gtp.Game) {\r\n               this.game = args;\r\n            }\r\n            else if (args) {\r\n               this.game = (<BaseStateArgs>args).game;\r\n            }\r\n            else { // Default to global game object\r\n                this.game = window.game;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Called right before a state starts.  Subclasses can do any needed\r\n         * initialization here.\r\n         */\r\n        init() {\r\n            // Subclasses can override\r\n        }\r\n   \r\n        /**\r\n         * Called when this state is being left for another one.\r\n         */\r\n        leaving(game: any) {\r\n        }\r\n   \r\n        /**\r\n         * Subclasses should override this method to do necessary update logic.\r\n         * \r\n         * @param {float} delta The amount of time that has elapsed since the last\r\n         *        frame/call to this method.\r\n         */\r\n        update(delta: number) {\r\n            // Subclasses should override\r\n        }\r\n   \r\n        /**\r\n         * Subclasses should override this method to render the screen.\r\n         * \r\n         * @param {CanvasRenderingContext2D} ctx The graphics context to render onto.\r\n         */\r\n        render(ctx: CanvasRenderingContext2D) {\r\n            // Subclasses should override\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}