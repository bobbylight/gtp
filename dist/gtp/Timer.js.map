{"version":3,"sources":["gtp/Timer.ts"],"names":["gtp","gtp.Timer","gtp.Timer.constructor","gtp.Timer.setLogPrefix","gtp.Timer.start","gtp.Timer.end","gtp.Timer.endAndLog"],"mappings":"AAAA,IAAO,GAAG,CAuET;AAvED,WAAO,GAAG,EAAC,CAAC;IACXA,YAAYA,CAACA;IAUbA;QAKCC;;;WAGGA;QACHA;YAPQC,gBAAWA,GAAYA,EAAEA,CAACA;YAC1BA,YAAOA,GAAWA,OAAOA,CAACA;QAOlCA,CAACA;QAEDD;;;;WAIGA;QACHA,4BAAYA,GAAZA,UAAaA,MAAwBA;YAAxBE,sBAAwBA,GAAxBA,gBAAwBA;YACpCA,IAAIA,CAACA,OAAOA,GAAGA,MAAMA,CAACA;QACvBA,CAACA;QAEDF;;;;WAIGA;QACHA,qBAAKA,GAALA,UAAMA,GAAWA;YAChBG,IAAIA,CAACA,WAAWA,CAACA,GAAGA,CAACA,GAAGA,IAAIA,IAAIA,EAAEA,CAACA,OAAOA,EAAEA,CAACA;QAC9CA,CAACA;QAEDH;;;;WAIGA;QACHA,mBAAGA,GAAHA,UAAIA,GAAWA;YACdI,IAAIA,KAAKA,GAAWA,IAAIA,CAACA,WAAWA,CAACA,GAAGA,CAACA,CAACA;YAC1CA,EAAEA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;gBACZA,OAAOA,CAACA,KAAKA,CAACA,wBAAwBA,GAAGA,GAAGA,GAAGA,2BAA2BA,CAACA,CAACA;gBAC5EA,MAAMA,CAACA,CAACA,CAACA,CAACA;YACXA,CAACA;YACDA,IAAIA,IAAIA,GAAWA,IAAIA,IAAIA,EAAEA,CAACA,OAAOA,EAAEA,GAAGA,KAAKA,CAACA;YAChDA,OAAOA,IAAIA,CAACA,WAAWA,CAACA,GAAGA,CAACA,CAACA;YAC7BA,MAAMA,CAACA,IAAIA,CAACA;QACbA,CAACA;QAEDJ;;;;WAIGA;QACHA,yBAASA,GAATA,UAAUA,GAAWA;YACpBK,IAAIA,IAAIA,GAAWA,IAAIA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA;YACjCA,EAAEA,CAACA,CAACA,IAAIA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACfA,OAAOA,CAACA,GAAGA,CAACA,IAAIA,CAACA,OAAOA,GAAGA,IAAIA,GAAGA,GAAGA,GAAGA,IAAIA,GAAGA,IAAIA,GAAGA,KAAKA,CAACA,CAACA;YAC9DA,CAACA;QACFA,CAACA;QAGFL,YAACA;IAADA,CA3DAD,AA2DCC,IAAAD;IA3DYA,SAAKA,QA2DjBA,CAAAA;AACFA,CAACA,EAvEM,GAAG,KAAH,GAAG,QAuET","file":"gtp/Timer.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * A mapping from string keys to numbers.  Used to map named events to their\r\n\t * run times.\r\n\t */\r\n\tinterface TimeMap {\r\n\t\t[key: string]: number;\r\n\t}\r\n\r\n\texport class Timer {\r\n\r\n\t\tprivate _startTimes: TimeMap = {};\r\n\t\tprivate _prefix: string = 'DEBUG';\r\n\r\n\t\t/**\r\n\t\t * Allows you to time actions and log their runtimes to the console.\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tconstructor() {\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Sets the prefix to prepend to each line printed to the console.\r\n\t\t * \r\n\t\t * @param {String} prefix The new prefix.  'DEBUG' is used if not defined.\r\n\t\t */\r\n\t\tsetLogPrefix(prefix: string = 'DEBUG') {\r\n\t\t\tthis._prefix = prefix;\r\n\t\t}\r\n   \r\n\t\t/**\r\n\t\t * Starts timing something.\r\n\t\t * \r\n\t\t * @param {String} key A unique key for the thing being timed.\r\n\t\t */\r\n\t\tstart(key: string) {\r\n\t\t\tthis._startTimes[key] = new Date().getTime();\r\n\t\t}\r\n   \r\n\t\t/**\r\n\t\t * Stops timing something.\r\n\t\t * \r\n\t\t * @param {String} key The key of the thing being timed.\r\n\t\t */\r\n\t\tend(key: string) {\r\n\t\t\tvar start: number = this._startTimes[key];\r\n\t\t\tif (!start) {\r\n\t\t\t\tconsole.error('Cannot end timer for \"' + key + '\" as it was never started');\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tvar time: number = new Date().getTime() - start;\r\n\t\t\tdelete this._startTimes[key];\r\n\t\t\treturn time;\r\n\t\t}\r\n   \r\n\t\t/**\r\n\t\t * Stops timing something and logs its runtime to the console.\r\n\t\t * \r\n\t\t * @param {String} key The key of the thing being timed.\r\n\t\t */\r\n\t\tendAndLog(key: string) {\r\n\t\t\tvar time: number = this.end(key);\r\n\t\t\tif (time > -1) {\r\n\t\t\t\tconsole.log(this._prefix + ': ' + key + ': ' + time + ' ms');\r\n\t\t\t}\r\n\t\t}\r\n   \r\n\r\n\t}\r\n}"],"sourceRoot":"/source/"}