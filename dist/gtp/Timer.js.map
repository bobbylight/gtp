{"version":3,"sources":["gtp/Timer.ts"],"names":[],"mappings":"AAAA,IAAO,GAAG,CAuET;AAvED,WAAO,GAAG,EAAC,CAAC;IACX,YAAY,CAAC;IAUb;QAKC;;;WAGG;QACH;YAPQ,gBAAW,GAAY,EAAE,CAAC;YAC1B,YAAO,GAAW,OAAO,CAAC;QAOlC,CAAC;QAED;;;;WAIG;QACH,4BAAY,GAAZ,UAAa,MAAwB;YAAxB,sBAAwB,GAAxB,gBAAwB;YACpC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACvB,CAAC;QAED;;;;WAIG;QACH,qBAAK,GAAL,UAAM,GAAW;YAChB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,SAAK,CAAC,SAAS,EAAE,CAAC;QAC3C,CAAC;QAED;;;;WAIG;QACH,mBAAG,GAAH,UAAI,GAAW;YACd,IAAI,KAAK,GAAW,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACZ,OAAO,CAAC,KAAK,CAAC,wBAAwB,GAAG,GAAG,GAAG,2BAA2B,CAAC,CAAC;gBAC5E,MAAM,CAAC,CAAC,CAAC,CAAC;YACX,CAAC;YACD,IAAI,IAAI,GAAW,SAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;YAC7C,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED;;;;WAIG;QACH,yBAAS,GAAT,UAAU,GAAW;YACpB,IAAI,IAAI,GAAW,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACf,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC;YAC9D,CAAC;QACF,CAAC;QAGF,YAAC;IAAD,CA3DA,AA2DC,IAAA;IA3DY,SAAK,QA2DjB,CAAA;AACF,CAAC,EAvEM,GAAG,KAAH,GAAG,QAuET","file":"gtp/Timer.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * A mapping from string keys to numbers.  Used to map named events to their\r\n\t * run times.\r\n\t */\r\n\tinterface TimeMap {\r\n\t\t[key: string]: number;\r\n\t}\r\n\r\n\texport class Timer {\r\n\r\n\t\tprivate _startTimes: TimeMap = {};\r\n\t\tprivate _prefix: string = 'DEBUG';\r\n\r\n\t\t/**\r\n\t\t * Allows you to time actions and log their runtimes to the console.\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tconstructor() {\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Sets the prefix to prepend to each line printed to the console.\r\n\t\t *\r\n\t\t * @param {String} prefix The new prefix.  'DEBUG' is used if not defined.\r\n\t\t */\r\n\t\tsetLogPrefix(prefix: string = 'DEBUG') {\r\n\t\t\tthis._prefix = prefix;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Starts timing something.\r\n\t\t *\r\n\t\t * @param {String} key A unique key for the thing being timed.\r\n\t\t */\r\n\t\tstart(key: string) {\r\n\t\t\tthis._startTimes[key] = Utils.timestamp();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stops timing something.\r\n\t\t *\r\n\t\t * @param {String} key The key of the thing being timed.\r\n\t\t */\r\n\t\tend(key: string) {\r\n\t\t\tvar start: number = this._startTimes[key];\r\n\t\t\tif (!start) {\r\n\t\t\t\tconsole.error('Cannot end timer for \"' + key + '\" as it was never started');\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tvar time: number = Utils.timestamp() - start;\r\n\t\t\tdelete this._startTimes[key];\r\n\t\t\treturn time;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stops timing something and logs its runtime to the console.\r\n\t\t * \r\n\t\t * @param {String} key The key of the thing being timed.\r\n\t\t */\r\n\t\tendAndLog(key: string) {\r\n\t\t\tvar time: number = this.end(key);\r\n\t\t\tif (time > -1) {\r\n\t\t\t\tconsole.log(this._prefix + ': ' + key + ': ' + time + ' ms');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}