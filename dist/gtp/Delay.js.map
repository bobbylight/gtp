{"version":3,"sources":["gtp/Delay.ts"],"names":["gtp","gtp.Delay","gtp.Delay.constructor","gtp.Delay.update","gtp.Delay.getLoopCount","gtp.Delay.getMaxDelta","gtp.Delay.getMinDelta","gtp.Delay.getRemaining","gtp.Delay.getRemainingPercent","gtp.Delay.isDone","gtp.Delay.setRandomDelta","gtp.Delay.reset","gtp.Delay.toString"],"mappings":"AAAA,IAAO,GAAG,CAgMT;AAhMD,WAAO,GAAG,EAAC,CAAC;IACRA,YAAYA,CAACA;IAcbA;;;;;;;;;;;;;;;;;;;;;;;OAuBGA;IACHA;QAaIC,eAAYA,IAAeA;YACvBC,EAAEA,CAACA,CAACA,CAACA,IAAIA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA;gBACxBA,MAAMA,iDAAiDA,CAACA;YAC5DA,CAACA;YACDA,IAAIA,CAACA,QAAQA,GAAGA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,GAAGA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;YACjEA,IAAIA,CAACA,aAAaA,GAAGA,CAACA,CAACA;YACvBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,IAAIA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA;gBACjCA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,CAACA,QAAQA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YACtDA,CAACA;YACDA,IAAIA,CAACA,SAASA,GAAGA,IAAIA,CAACA,QAAQA,CAACA;YAC/BA,IAAIA,CAACA,KAAKA,GAAGA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA;YACzBA,IAAIA,CAACA,UAAUA,GAAGA,CAACA,CAACA;YACpBA,IAAIA,CAACA,aAAaA,GAAGA,IAAIA,CAACA,KAAKA,GAAGA,CAACA,IAAIA,CAACA,SAASA,IAAIA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;YAC9DA,IAAIA,CAACA,KAAKA,EAAEA,CAACA;QACjBA,CAACA;QAEDD;;;;;;WAMGA;QACHA,sBAAMA,GAANA,UAAOA,KAAaA;YAChBE,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACtBA,IAAIA,CAACA,UAAUA,IAAIA,KAAKA,CAACA;gBACzBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,IAAIA,CAACA,IAAIA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA;oBACzCA,IAAIA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA;gBACzBA,CAACA;YACLA,CAACA;YACDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA;oBACbA,EAAEA,CAACA,CAACA,IAAIA,CAACA,aAAaA,KAAKA,CAACA,CAACA,IAAIA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,aAAaA,GAAGA,CAACA,CAACA,CAACA,CAACA;wBACxEA,IAAIA,CAACA,UAAUA,EAAEA,CAACA;wBAClBA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA;oBACrBA,CAACA;oBACDA,IAAIA,CAACA,CAACA;wBACFA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,aAAaA,CAACA;wBACrCA,IAAIA,CAACA,UAAUA,GAAGA,CAACA,CAACA,CAACA;oBACzBA,CAACA;gBACLA,CAACA;gBACDA,IAAIA,CAACA,CAACA;oBACFA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,CAACA,EAAEA,IAAIA,CAACA,UAAUA,CAACA,CAACA;gBACnDA,CAACA;YACLA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,EAAEA,CAACA;QACzBA,CAACA;QAEDF;;;;WAIGA;QACHA,4BAAYA,GAAZA;YACIG,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA;QAC3BA,CAACA;QAEDH;;;;;WAKGA;QACHA,2BAAWA,GAAXA;YACII,MAAMA,CAACA,OAAOA,IAAIA,CAACA,SAASA,KAAKA,WAAWA,GAAGA,IAAIA,CAACA,SAASA,GAAGA,CAACA,CAACA,CAACA;QACvEA,CAACA;QAEDJ;;;;;WAKGA;QACHA,2BAAWA,GAAXA;YACIK,MAAMA,CAACA,OAAOA,IAAIA,CAACA,SAASA,KAAKA,WAAWA,GAAGA,IAAIA,CAACA,SAASA,GAAGA,CAACA,CAACA,CAACA;QACvEA,CAACA;QAEDL;;;;WAIGA;QACHA,4BAAYA,GAAZA;YACIM,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA;QAC3BA,CAACA;QAEDN;;;;;WAKGA;QACHA,mCAAmBA,GAAnBA;YACIO,MAAMA,CAACA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,WAAWA,CAACA;QAC9CA,CAACA;QAEDP;;;;WAIGA;QACHA,sBAAMA,GAANA;YACIQ,MAAMA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,IAAIA,IAAIA,CAACA,UAAUA,KAAKA,IAAIA,CAACA,aAAaA,CAACA;gBAC1DA,IAAIA,CAACA,UAAUA,IAAIA,CAACA,CAACA;QAC7BA,CAACA;QAEDR;;;;;WAKGA;QACHA,8BAAcA,GAAdA,UAAeA,GAAWA,EAAEA,GAAWA;YACnCS,IAAIA,CAACA,SAASA,GAAGA,GAAGA,CAACA;YACrBA,IAAIA,CAACA,SAASA,GAAGA,GAAGA,CAACA;QACzBA,CAACA;QAEDT,qBAAKA,GAALA,UAAMA,MAAgBA;YAClBU,MAAMA,GAAGA,CAACA,CAACA,MAAMA,CAACA;YAClBA,IAAIA,aAAaA,GAAWA,IAAIA,CAACA,UAAUA,CAACA;YAC5CA,IAAIA,CAACA,WAAWA,GAAGA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;YACvEA,EAAEA,CAACA,CAACA,MAAMA,IAAIA,aAAaA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,IAAIA,CAACA,UAAUA,IAAIA,aAAaA,CAACA,CAACA,iCAAiCA;YACvEA,CAACA;YACDA,IAAIA,CAACA,aAAaA,GAAGA,CAACA,IAAIA,CAACA,aAAaA,GAAGA,CAACA,CAACA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,MAAMA,CAACA;YACrEA,EAAEA,CAACA,CAACA,IAAIA,CAACA,SAASA,IAAIA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA;YAEvCA,CAACA;QACLA,CAACA;QAEDV,wBAAQA,GAARA;YACIW,MAAMA,CAACA,uBAAuBA,GAAGA,IAAIA,CAACA,QAAQA;gBAC1CA,eAAeA,GAAGA,IAAIA,CAACA,UAAUA;gBACjCA,UAAUA,GAAGA,IAAIA,CAACA,KAAKA;gBACvBA,cAAcA,GAAGA,CAACA,IAAIA,CAACA,SAASA,IAAIA,IAAIA,CAACA;gBACzCA,GAAGA,CAACA;QACZA,CAACA;QAELX,YAACA;IAADA,CAvJAD,AAuJCC,IAAAD;IAvJYA,SAAKA,QAuJjBA,CAAAA;AAELA,CAACA,EAhMM,GAAG,KAAH,GAAG,QAgMT","file":"gtp/Delay.js","sourcesContent":["module gtp {\r\n    'use strict';\r\n\r\n    /**\r\n     * Arguments to the Delay constructor.\r\n     */\r\n    export interface DelayArgs {\r\n        millis: any;\r\n        minDelta?: number;\r\n        maxDelta?: number;\r\n        callback?: Function;\r\n        loop?: boolean;\r\n        loopCount?: number;\r\n    }\r\n\r\n    /**\r\n     * A way to keep track of a delay.  Useful when you want some event to occur\r\n     * every X milliseconds, for example.\r\n     *\r\n     * @param {object} args Arguments to this delay.\r\n     * @param {number-or-array} args.millis The number of milliseconds between\r\n     *        events.  You can specify an array of numbers to have the even trigger\r\n     *        at non-equal intervals.\r\n     * @param {int} [args.minDelta] If specified, a minimum amount of variance for\r\n     *        the event.  May be negative, but should be larger than the smallest\r\n     *        value specified in millis.\r\n     * @param {int} [args.maxDelta] If specified, a maximum amount of variance for\r\n     *        the event.\r\n     * @param {int} [args.loop] If specified and <code>true</code>, this timer will\r\n     *        automatically repeat and <code>isDone()</code> will never return\r\n     *        <code>true</code>.\r\n     * @param {int} [args.loopCount] This argument is only honored if\r\n     *        <code>args.loop</code> is defined and <code>true</code>.  If true,\r\n     *        this argument is the number of times to loop; if this argument is not\r\n     *        specified, looping will occur indefinitely.\r\n     * @param {function} [args.callback] If specified, a callback function that\r\n     *        will be called when this delay fires.\r\n     * @constructor\r\n     */\r\n    export class Delay {\r\n\r\n        _initial: number[];\r\n        _initialIndex: number;\r\n        _callback: Function;\r\n        _loop: boolean;\r\n        _loopCount: number;\r\n        _maxLoopCount: number;\r\n        _minDelta: number;\r\n        _maxDelta: number;\r\n        _remaining: number;\r\n        _curInitial: number;\r\n\r\n        constructor(args: DelayArgs) {\r\n            if (!args || !args.millis) {\r\n                throw 'Missing required \"millis\" argument to gtp.Delay';\r\n            }\r\n            this._initial = args.millis.length ? args.millis : [args.millis];\r\n            this._initialIndex = 0;\r\n            if (args.minDelta && args.maxDelta) {\r\n                this.setRandomDelta(args.minDelta, args.maxDelta);\r\n            }\r\n            this._callback = args.callback;\r\n            this._loop = !!args.loop;\r\n            this._loopCount = 0;\r\n            this._maxLoopCount = this._loop ? (args.loopCount || -1) : -1;\r\n            this.reset();\r\n        }\r\n\r\n        /**\r\n         * Should be called in the update() method of the current game state to\r\n         * update this Delay.\r\n         *\r\n         * @param {int} delta The time that has elapsed since the last call to this\r\n         *        method.\r\n         */\r\n        update(delta: number) {\r\n            if (this._remaining > 0) {\r\n                this._remaining -= delta;\r\n                if (this._remaining <= 0 && this._callback) {\r\n                    this._callback(this);\r\n                }\r\n            }\r\n            if (this._remaining <= 0) {\r\n                if (this._loop) {\r\n                    if (this._maxLoopCount === -1 || this._loopCount < this._maxLoopCount - 1) {\r\n                        this._loopCount++;\r\n                        this.reset(true);\r\n                    }\r\n                    else {\r\n                        this._loopCount = this._maxLoopCount;\r\n                        this._remaining = -1;\r\n                    }\r\n                }\r\n                else {\r\n                    this._remaining = Math.max(0, this._remaining);\r\n                }\r\n            }\r\n            return this.isDone();\r\n        }\r\n\r\n        /**\r\n         * Returns the number of times this Delay has looped.\r\n         *\r\n         * @return {int} The number of times this Delay has looped.\r\n         */\r\n        getLoopCount(): number {\r\n            return this._loopCount;\r\n        }\r\n\r\n        /**\r\n         * Returns the maximum delta value, or -1 if none was defined.\r\n         *\r\n         * @return {int} The maximum delta value.\r\n         * @see getMinDelta()\r\n         */\r\n        getMaxDelta(): number {\r\n            return typeof this._maxDelta !== 'undefined' ? this._maxDelta : -1;\r\n        }\r\n\r\n        /**\r\n         * Returns the minimum delta value, or -1 if none was defined.\r\n         *\r\n         * @return {int} The minimum delta value.\r\n         * @see getMaxDelta()\r\n         */\r\n        getMinDelta(): number {\r\n            return typeof this._minDelta !== 'undefined' ? this._minDelta : -1;\r\n        }\r\n\r\n        /**\r\n         * Returns the remaining time on this delay.\r\n         *\r\n         * @return {int} The remaining time on this delay.\r\n         */\r\n        getRemaining(): number {\r\n            return this._remaining;\r\n        }\r\n\r\n        /**\r\n         * Returns how far along we are in this delay, in the range\r\n         * 0 - 1.\r\n         *\r\n         * @return {int} How far along we are in this delay.\r\n         */\r\n        getRemainingPercent(): number {\r\n            return this._remaining / this._curInitial;\r\n        }\r\n\r\n        /**\r\n         * Returns whether this Delay has completed.\r\n         *\r\n         * @return {boolean} Whether this Delay has completed.\r\n         */\r\n        isDone(): boolean {\r\n            return (!this._loop || this._loopCount === this._maxLoopCount) &&\r\n                this._remaining <= 0;\r\n        }\r\n\r\n        /**\r\n         * Causes this delay to trigger with a little random variance.\r\n         *\r\n         * @param {int} min The minimum possible variance, inclusive.\r\n         * @param {int} max The maximum possible variance, exclusive.\r\n         */\r\n        setRandomDelta(min: number, max: number) {\r\n            this._minDelta = min;\r\n            this._maxDelta = max;\r\n        }\r\n\r\n        reset(smooth?: boolean) {\r\n            smooth = !!smooth;\r\n            var prevRemaining: number = this._remaining;\r\n            this._curInitial = this._remaining = this._initial[this._initialIndex];\r\n            if (smooth && prevRemaining < 0) {\r\n                this._remaining += prevRemaining; // Subtract how much we went over\r\n            }\r\n            this._initialIndex = (this._initialIndex + 1) % this._initial.length;\r\n            if (this._minDelta || this._maxDelta) {\r\n                //                this._remaining += gtp.Utils.randomInt(this._minDelta, this._maxDelta);\r\n            }\r\n        }\r\n\r\n        toString() {\r\n            return '[gtp.Delay: _initial=' + this._initial +\r\n                ', _remaining=' + this._remaining +\r\n                ', _loop=' + this._loop +\r\n                ', _callback=' + (this._callback != null) +\r\n                ']';\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}