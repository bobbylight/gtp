{"version":3,"sources":["gtp/Delay.ts"],"names":["gtp","gtp.Delay","gtp.Delay.constructor","gtp.Delay.update","gtp.Delay.getLoopCount","gtp.Delay.getMaxDelta","gtp.Delay.getMinDelta","gtp.Delay.getRemaining","gtp.Delay.getRemainingPercent","gtp.Delay.isDone","gtp.Delay.setRandomDelta","gtp.Delay.reset","gtp.Delay.toString"],"mappings":"AAAA,IAAO,GAAG,CAgMT;AAhMD,WAAO,GAAG,EAAC,CAAC;IACXA,YAAYA,CAACA;IAcbA;;;;;;;;;;;;;;;;;;;;;;;OAuBGA;IACHA;QAaCC,eAAYA,IAAeA;YAC1BC,EAAEA,CAACA,CAACA,CAACA,IAAIA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA;gBAC3BA,MAAMA,iDAAiDA,CAACA;YACzDA,CAACA;YACDA,IAAIA,CAACA,QAAQA,GAAGA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,GAAGA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;YACjEA,IAAIA,CAACA,aAAaA,GAAGA,CAACA,CAACA;YACvBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,IAAIA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA;gBACpCA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,CAACA,QAAQA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YACnDA,CAACA;YACDA,IAAIA,CAACA,SAASA,GAAGA,IAAIA,CAACA,QAAQA,CAACA;YAC/BA,IAAIA,CAACA,KAAKA,GAAGA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA;YACzBA,IAAIA,CAACA,UAAUA,GAAGA,CAACA,CAACA;YACpBA,IAAIA,CAACA,aAAaA,GAAGA,IAAIA,CAACA,KAAKA,GAAGA,CAACA,IAAIA,CAACA,SAASA,IAAIA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;YAC9DA,IAAIA,CAACA,KAAKA,EAAEA,CAACA;QACdA,CAACA;QAEDD;;;;;;WAMGA;QACHA,sBAAMA,GAANA,UAAOA,KAAaA;YACnBE,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACzBA,IAAIA,CAACA,UAAUA,IAAIA,KAAKA,CAACA;gBACzBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,IAAIA,CAACA,IAAIA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA;oBAC5CA,IAAIA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA;gBACtBA,CAACA;YACFA,CAACA;YACDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1BA,EAAEA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA;oBAChBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,aAAaA,KAAKA,CAACA,CAACA,IAAIA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,aAAaA,GAAGA,CAACA,CAACA,CAACA,CAACA;wBAC3EA,IAAIA,CAACA,UAAUA,EAAEA,CAACA;wBAClBA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA;oBAClBA,CAACA;oBACDA,IAAIA,CAACA,CAACA;wBACLA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,aAAaA,CAACA;wBACrCA,IAAIA,CAACA,UAAUA,GAAGA,CAACA,CAACA,CAACA;oBACtBA,CAACA;gBACFA,CAACA;gBACDA,IAAIA,CAACA,CAACA;oBACLA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,CAACA,EAAEA,IAAIA,CAACA,UAAUA,CAACA,CAACA;gBAChDA,CAACA;YACFA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,EAAEA,CAACA;QACtBA,CAACA;QAEDF;;;;WAIGA;QACHA,4BAAYA,GAAZA;YACCG,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA;QACxBA,CAACA;QAEDH;;;;;WAKGA;QACHA,2BAAWA,GAAXA;YACCI,MAAMA,CAACA,OAAOA,IAAIA,CAACA,SAASA,KAAKA,WAAWA,GAAGA,IAAIA,CAACA,SAASA,GAAGA,CAACA,CAACA,CAACA;QACpEA,CAACA;QAEDJ;;;;;WAKGA;QACHA,2BAAWA,GAAXA;YACCK,MAAMA,CAACA,OAAOA,IAAIA,CAACA,SAASA,KAAKA,WAAWA,GAAGA,IAAIA,CAACA,SAASA,GAAGA,CAACA,CAACA,CAACA;QACpEA,CAACA;QAEDL;;;;WAIGA;QACHA,4BAAYA,GAAZA;YACCM,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA;QACxBA,CAACA;QAEDN;;;;;WAKGA;QACHA,mCAAmBA,GAAnBA;YACCO,MAAMA,CAACA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,WAAWA,CAACA;QAC3CA,CAACA;QAEDP;;;;WAIGA;QACHA,sBAAMA,GAANA;YACCQ,MAAMA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,IAAIA,IAAIA,CAACA,UAAUA,KAAKA,IAAIA,CAACA,aAAaA,CAACA;gBAC7DA,IAAIA,CAACA,UAAUA,IAAIA,CAACA,CAACA;QACvBA,CAACA;QAEDR;;;;;WAKGA;QACHA,8BAAcA,GAAdA,UAAeA,GAAWA,EAAEA,GAAWA;YACtCS,IAAIA,CAACA,SAASA,GAAGA,GAAGA,CAACA;YACrBA,IAAIA,CAACA,SAASA,GAAGA,GAAGA,CAACA;QACtBA,CAACA;QAEDT,qBAAKA,GAALA,UAAMA,MAAgBA;YACrBU,MAAMA,GAAGA,CAACA,CAACA,MAAMA,CAACA;YAClBA,IAAIA,aAAaA,GAAWA,IAAIA,CAACA,UAAUA,CAACA;YAC5CA,IAAIA,CAACA,WAAWA,GAAGA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;YACvEA,EAAEA,CAACA,CAACA,MAAMA,IAAIA,aAAaA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACjCA,IAAIA,CAACA,UAAUA,IAAIA,aAAaA,CAACA,CAACA,iCAAiCA;YACpEA,CAACA;YACDA,IAAIA,CAACA,aAAaA,GAAGA,CAACA,IAAIA,CAACA,aAAaA,GAAGA,CAACA,CAACA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,MAAMA,CAACA;YACrEA,EAAEA,CAACA,CAACA,IAAIA,CAACA,SAASA,IAAIA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA;YAEvCA,CAACA;QACFA,CAACA;QAEDV,wBAAQA,GAARA;YACCW,MAAMA,CAACA,uBAAuBA,GAAGA,IAAIA,CAACA,QAAQA;gBAC7CA,eAAeA,GAAGA,IAAIA,CAACA,UAAUA;gBACjCA,UAAUA,GAAGA,IAAIA,CAACA,KAAKA;gBACvBA,cAAcA,GAAGA,CAACA,IAAIA,CAACA,SAASA,IAAIA,IAAIA,CAACA;gBACzCA,GAAGA,CAACA;QACNA,CAACA;QAEFX,YAACA;IAADA,CAvJAD,AAuJCC,IAAAD;IAvJYA,SAAKA,QAuJjBA,CAAAA;AAEFA,CAACA,EAhMM,GAAG,KAAH,GAAG,QAgMT","file":"gtp/Delay.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Arguments to the Delay constructor.\r\n\t */\r\n\texport interface DelayArgs {\r\n\t\tmillis: any;\r\n\t\tminDelta?: number;\r\n\t\tmaxDelta?: number;\r\n\t\tcallback?: Function;\r\n\t\tloop?: boolean;\r\n\t\tloopCount?: number;\r\n\t}\r\n\r\n\t/**\r\n\t * A way to keep track of a delay.  Useful when you want some event to occur\r\n\t * every X milliseconds, for example.\r\n\t *\r\n\t * @param {object} args Arguments to this delay.\r\n\t * @param {number-or-array} args.millis The number of milliseconds between\r\n\t *        events.  You can specify an array of numbers to have the even trigger\r\n\t *        at non-equal intervals.\r\n\t * @param {int} [args.minDelta] If specified, a minimum amount of variance for\r\n\t *        the event.  May be negative, but should be larger than the smallest\r\n\t *        value specified in millis.\r\n\t * @param {int} [args.maxDelta] If specified, a maximum amount of variance for\r\n\t *        the event.\r\n\t * @param {int} [args.loop] If specified and <code>true</code>, this timer will\r\n\t *        automatically repeat and <code>isDone()</code> will never return\r\n\t *        <code>true</code>.\r\n\t * @param {int} [args.loopCount] This argument is only honored if\r\n\t *        <code>args.loop</code> is defined and <code>true</code>.  If true,\r\n\t *        this argument is the number of times to loop; if this argument is not\r\n\t *        specified, looping will occur indefinitely.\r\n\t * @param {function} [args.callback] If specified, a callback function that\r\n\t *        will be called when this delay fires.\r\n\t * @constructor\r\n\t */\r\n\texport class Delay {\r\n\r\n\t\t_initial: number[];\r\n\t\t_initialIndex: number;\r\n\t\t_callback: Function;\r\n\t\t_loop: boolean;\r\n\t\t_loopCount: number;\r\n\t\t_maxLoopCount: number;\r\n\t\t_minDelta: number;\r\n\t\t_maxDelta: number;\r\n\t\t_remaining: number;\r\n\t\t_curInitial: number;\r\n\r\n\t\tconstructor(args: DelayArgs) {\r\n\t\t\tif (!args || !args.millis) {\r\n\t\t\t\tthrow 'Missing required \"millis\" argument to gtp.Delay';\r\n\t\t\t}\r\n\t\t\tthis._initial = args.millis.length ? args.millis : [args.millis];\r\n\t\t\tthis._initialIndex = 0;\r\n\t\t\tif (args.minDelta && args.maxDelta) {\r\n\t\t\t\tthis.setRandomDelta(args.minDelta, args.maxDelta);\r\n\t\t\t}\r\n\t\t\tthis._callback = args.callback;\r\n\t\t\tthis._loop = !!args.loop;\r\n\t\t\tthis._loopCount = 0;\r\n\t\t\tthis._maxLoopCount = this._loop ? (args.loopCount || -1) : -1;\r\n\t\t\tthis.reset();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Should be called in the update() method of the current game state to\r\n\t\t * update this Delay.\r\n\t\t *\r\n\t\t * @param {int} delta The time that has elapsed since the last call to this\r\n\t\t *        method.\r\n\t\t */\r\n\t\tupdate(delta: number) {\r\n\t\t\tif (this._remaining > 0) {\r\n\t\t\t\tthis._remaining -= delta;\r\n\t\t\t\tif (this._remaining <= 0 && this._callback) {\r\n\t\t\t\t\tthis._callback(this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this._remaining <= 0) {\r\n\t\t\t\tif (this._loop) {\r\n\t\t\t\t\tif (this._maxLoopCount === -1 || this._loopCount < this._maxLoopCount - 1) {\r\n\t\t\t\t\t\tthis._loopCount++;\r\n\t\t\t\t\t\tthis.reset(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._loopCount = this._maxLoopCount;\r\n\t\t\t\t\t\tthis._remaining = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._remaining = Math.max(0, this._remaining);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this.isDone();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the number of times this Delay has looped.\r\n\t\t *\r\n\t\t * @return {int} The number of times this Delay has looped.\r\n\t\t */\r\n\t\tgetLoopCount(): number {\r\n\t\t\treturn this._loopCount;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the maximum delta value, or -1 if none was defined.\r\n\t\t *\r\n\t\t * @return {int} The maximum delta value.\r\n\t\t * @see getMinDelta()\r\n\t\t */\r\n\t\tgetMaxDelta(): number {\r\n\t\t\treturn typeof this._maxDelta !== 'undefined' ? this._maxDelta : -1;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the minimum delta value, or -1 if none was defined.\r\n\t\t *\r\n\t\t * @return {int} The minimum delta value.\r\n\t\t * @see getMaxDelta()\r\n\t\t */\r\n\t\tgetMinDelta(): number {\r\n\t\t\treturn typeof this._minDelta !== 'undefined' ? this._minDelta : -1;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the remaining time on this delay.\r\n\t\t *\r\n\t\t * @return {int} The remaining time on this delay.\r\n\t\t */\r\n\t\tgetRemaining(): number {\r\n\t\t\treturn this._remaining;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns how far along we are in this delay, in the range\r\n\t\t * 0 - 1.\r\n\t\t *\r\n\t\t * @return {int} How far along we are in this delay.\r\n\t\t */\r\n\t\tgetRemainingPercent(): number {\r\n\t\t\treturn this._remaining / this._curInitial;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns whether this Delay has completed.\r\n\t\t *\r\n\t\t * @return {boolean} Whether this Delay has completed.\r\n\t\t */\r\n\t\tisDone(): boolean {\r\n\t\t\treturn (!this._loop || this._loopCount === this._maxLoopCount) &&\r\n\t\t\t\tthis._remaining <= 0;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Causes this delay to trigger with a little random variance.\r\n\t\t *\r\n\t\t * @param {int} min The minimum possible variance, inclusive.\r\n\t\t * @param {int} max The maximum possible variance, exclusive.\r\n\t\t */\r\n\t\tsetRandomDelta(min: number, max: number) {\r\n\t\t\tthis._minDelta = min;\r\n\t\t\tthis._maxDelta = max;\r\n\t\t}\r\n\r\n\t\treset(smooth?: boolean) {\r\n\t\t\tsmooth = !!smooth;\r\n\t\t\tvar prevRemaining: number = this._remaining;\r\n\t\t\tthis._curInitial = this._remaining = this._initial[this._initialIndex];\r\n\t\t\tif (smooth && prevRemaining < 0) {\r\n\t\t\t\tthis._remaining += prevRemaining; // Subtract how much we went over\r\n\t\t\t}\r\n\t\t\tthis._initialIndex = (this._initialIndex + 1) % this._initial.length;\r\n\t\t\tif (this._minDelta || this._maxDelta) {\r\n\t\t\t\t//\t\t\t\tthis._remaining += gtp.Utils.randomInt(this._minDelta, this._maxDelta);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttoString() {\r\n\t\t\treturn '[gtp.Delay: _initial=' + this._initial +\r\n\t\t\t\t', _remaining=' + this._remaining +\r\n\t\t\t\t', _loop=' + this._loop +\r\n\t\t\t\t', _callback=' + (this._callback != null) +\r\n\t\t\t\t']';\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":"/source/"}