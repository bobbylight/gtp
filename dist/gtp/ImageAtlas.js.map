{"version":3,"sources":["../src/gtp/ImageAtlas.ts"],"names":[],"mappings":"AAAA,IAAO,GAAG,CA8CT;AA9CD,WAAO,GAAG,EAAC,CAAC;IACX,YAAY,CAAC;IAEb;QAKC,oBAAY,IAAS;YACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;YACjC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC;YACjC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC9E,CAAC;QACF,CAAC;QAED,0BAAK,GAAL;YAEC,IAAM,MAAM,GAAgC,EAAE,CAAC;YAC/C,IAAM,IAAI,GAAe,IAAI,CAAC;YAE9B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,OAAY;gBAE3C,IAAM,EAAE,GAAW,OAAO,CAAC,EAAE,CAAC;gBAC9B,IAAI,GAAQ,CAAC;gBACb,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjB,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAChC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;wBACtB,MAAM,IAAI,KAAK,CAAC,iCAAiC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;oBAClE,CAAC;gBACF,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,GAAG,GAAG,EAAE,CAAC;oBACT,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;gBACtD,CAAC;gBAED,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,UAAC,GAAW;oBACzB,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAChF,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QACF,iBAAC;IAAD,CA1CA,AA0CC,IAAA;IA1CY,cAAU,aA0CtB,CAAA;AACF,CAAC,EA9CM,GAAG,KAAH,GAAG,QA8CT","file":"ImageAtlas.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\texport class ImageAtlas {\r\n\r\n\t\tprivate _atlasInfo: any;\r\n\t\tprivate _masterCanvas: HTMLCanvasElement;\r\n\r\n\t\tconstructor(args: any) {\r\n\t\t\tthis._atlasInfo = args.atlasInfo;\r\n\t\t\tthis._masterCanvas = args.canvas;\r\n\t\t\tif (this._atlasInfo.firstPixelIsTranslucent) {\r\n\t\t\t\tthis._masterCanvas = gtp.ImageUtils.makeColorTranslucent(this._masterCanvas);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tparse() {\r\n\r\n\t\t\tconst images: { [id: string]: gtp.Image } = {};\r\n\t\t\tconst self: ImageAtlas = this;\r\n\r\n\t\t\tthis._atlasInfo.images.forEach((imgInfo: any) => {\r\n\r\n\t\t\t\tconst id: string = imgInfo.id;\r\n\t\t\t\tlet dim: any;\r\n\t\t\t\tif (imgInfo.dim) {\r\n\t\t\t\t\tdim = imgInfo.dim.split(/,\\s*/);\r\n\t\t\t\t\tif (dim.length !== 4) {\r\n\t\t\t\t\t\tthrow new Error('Invalid value for imgInfo.dim: ' + imgInfo.dim);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdim = [];\r\n\t\t\t\t\tdim.push(imgInfo.x, imgInfo.y, imgInfo.w, imgInfo.h);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdim = dim.map((str: string) => {\r\n\t\t\t\t\treturn parseInt(str, 10) * 2;\r\n\t\t\t\t});\r\n\r\n\t\t\t\timages[id] = new gtp.Image(self._masterCanvas, dim[0], dim[1], dim[2], dim[3]);\r\n\t\t\t});\r\n\r\n\t\t\treturn images;\r\n\t\t}\r\n\t}\r\n}\r\n"]}