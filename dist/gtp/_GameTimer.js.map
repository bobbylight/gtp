{"version":3,"sources":["../src/gtp/_GameTimer.ts"],"names":[],"mappings":"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","file":"_GameTimer.js","sourcesContent":["module gtp {\n\t'use strict';\n\n\t/**\n\t * This class keeps track of game time.  That includes both total running\n\t * time, and \"active time\" (time not spent on paused screens, etc.).\n\t * @constructor\n\t */\n\texport class _GameTimer {\n\n\t\tprivate _startShift: number;\n\t\tprivate _paused: boolean;\n\t\tprivate _pauseStart: number;\n\t\tprivate _updating: boolean;\n\t\tprivate _notUpdatingStart: number;\n\n\t\tconstructor() {\n\t\t\tthis._paused = false;\n\t\t\tthis._pauseStart = 0;\n\t\t\tthis._updating = true;\n\t\t\tthis._notUpdatingStart = 0;\n\t\t}\n\n\t\t/**\n\t\t * Returns whether this game is paused.\n\t\t * @return {boolean} Whether this game is paused.\n\t\t */\n\t\tget paused(): boolean {\n\t\t\treturn this._paused;\n\t\t}\n\n\t\t/**\n\t\t * Returns the length of time the game has been played so far.  This is\n\t\t * \"playable time;\" that is, time in which the user is playing, and the\n\t\t * game is not paused or in a \"not updating\" state (such as the main\n\t\t * frame not having focus).\n\t\t *\n\t\t * @return {number} The amount of time the game has been played, in\n\t\t *         milliseconds.\n\t\t * @see resetPlayTime\n\t\t */\n\t\tget playTime(): number {\n\t\t\tif (this._pauseStart !== 0) {\n\t\t\t\treturn this._pauseStart - this._startShift;\n\t\t\t}\n\t\t\telse if (this._notUpdatingStart !== 0) {\n\t\t\t\treturn this._notUpdatingStart - this._startShift;\n\t\t\t}\n\t\t\treturn Utils.timestamp() - this._startShift;\n\t\t}\n\n\t\t/**\n\t\t * Returns whether this game is updating itself each frame.\n\t\t *\n\t\t * @return {boolean} Whether this game is updating itself.\n\t\t */\n\t\tget updating(): boolean {\n\t\t\treturn this._updating;\n\t\t}\n\n\t\t/**\n\t\t * Resets the \"playtime in milliseconds\" timer back to <code>0</code>.\n\t\t *\n\t\t * @see playTime\n\t\t */\n\t\tresetPlayTime() {\n\t\t\tif (this.paused || !this.updating) {\n\t\t\t\tthrow 'Cannot reset playtime millis when paused or not updating';\n\t\t\t}\n\t\t\tthis._startShift = Utils.timestamp();\n\t\t}\n\n\t\t/**\n\t\t * Sets whether the game is paused.  The game is still told to handle\n\t\t * input, update itself and render.  This is simply a flag that should\n\t\t * be set whenever a \"pause\" screen is displayed.  It stops the \"in-game\n\t\t * timer\" until the game is unpaused.\n\t\t *\n\t\t * @param paused Whether the game should be paused.\n\t\t * @see setUpdating\n\t\t */\n\t\tset paused(paused: boolean) {\n\t\t\t// Cannot pause while !updating, so this is okay\n\t\t\tif (this._paused !== paused) {\n\t\t\t\tthis._paused = paused;\n\t\t\t\tif (paused) {\n\t\t\t\t\tthis._pauseStart = Utils.timestamp();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst pauseTime: number = Utils.timestamp() - this._pauseStart;\n\t\t\t\t\tthis._startShift += pauseTime;\n\t\t\t\t\tthis._pauseStart = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Sets whether the game should be \"updating\" itself.  If a game is not\n\t\t * \"updating\" itself, then it is effectively \"paused,\" and will not accept\n\t\t * any input from the user.<p>\n\t\t *\n\t\t * This method can be used to temporarily \"pause\" a game when the game\n\t\t * window loses focus, for example.\n\t\t *\n\t\t * @param updating {boolean} Whether the game should be updating itself.\n\t\t */\n\t\tset updating(updating: boolean) {\n\t\t\tif (this._updating !== updating) {\n\t\t\t\tthis._updating = updating;\n\t\t\t\tif (!this.paused) { // \"pause\" state \"encompasses\" update state.\n\t\t\t\t\tif (!this._updating) {\n\t\t\t\t\t\tthis._notUpdatingStart = Utils.timestamp();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tconst notUpdatingTime: number = Utils.timestamp() - this._notUpdatingStart;\n\t\t\t\t\t\tthis._startShift += notUpdatingTime;\n\t\t\t\t\t\tthis._notUpdatingStart = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Resets this timer.  This should be called when a new game is started.\n\t\t */\n\t\tstart() {\n\t\t\tthis._startShift = Utils.timestamp();\n\t\t}\n\n\t}\n}\n"]}