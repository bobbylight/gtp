{"version":3,"sources":["gtp/Image.ts"],"names":[],"mappings":"AAAA,IAAO,GAAG,CA4IT;AA5ID,WAAO,GAAG,EAAC,CAAC;IACX,YAAY,CAAC;IAEb;QAQC;;;;;WAKG;QACH,eAAY,MAAyB,EAAE,CAAU,EAAE,CAAU,EAAE,CAAU,EAAE,CAAU;YACpF,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;gBAChB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YAClB,CAAC;YACD,IAAI,CAAC,CAAC;gBACL,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;gBACjC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YACpC,CAAC;YACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACzB,CAAC;QAED;;;WAGG;QACH,gCAAgB,GAAhB;YACC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAClD,IAAI,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACnD,IAAI,OAAO,GAAsB,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnE,IAAI,IAAI,GAA6B,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC9D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACxB,CAAC;QACF,CAAC;QAED;;;;;;WAMG;QACH,oBAAI,GAAJ,UAAK,GAA6B,EAAE,CAAS,EAAE,CAAS;YACvD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC,CAAC;gBACjD,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC;YACD,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EACpE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC;QAED;;;;;;;;;;WAUG;QACH,0BAAU,GAAV,UAAW,GAA6B,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;YACnF,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC,CAAC;gBACjD,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC;YACD,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EACpE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACd,CAAC;QAED;;;;;;;;;;;;;;WAcG;QACH,2BAAW,GAAX,UAAY,GAA6B,EAAE,IAAY,EAAE,IAAY,EACnE,IAAY,EAAE,IAAY,EAC1B,KAAa,EAAE,KAAa,EAAE,KAAa,EAAE,KAAa;YAE3D,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC,CAAC;gBACjD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACxB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACxB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1B,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC;YACD,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;YACrB,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;YAErB,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACjD,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC9B,CAAC;QAED;;;;;;;;;;WAUG;QACH,oCAAoB,GAApB,UAAqB,CAAa,EAAE,CAAa;YAA5B,iBAAa,GAAb,KAAa;YAAE,iBAAa,GAAb,KAAa;YAChD,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACzD,CAAC;QAED,sBAAI,wBAAK;iBAAT;gBACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpB,CAAC;;;WAAA;QAED,sBAAI,yBAAM;iBAAV;gBACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YACrB,CAAC;;;WAAA;QAEF,YAAC;IAAD,CAxIA,AAwIC,IAAA;IAxIY,SAAK,QAwIjB,CAAA;AACF,CAAC,EA5IM,GAAG,KAAH,GAAG,QA4IT","file":"gtp/Image.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\texport class Image {\r\n\r\n\t\tprivate _canvas: HTMLCanvasElement;\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\tprivate _width: number;\r\n\t\tprivate _height: number;\r\n\r\n\t\t/**\r\n\t\t * A wrapper around images.  Handles browser-specific quirks and other things\r\n\t\t * a game shouldn't have to know about.\r\n\t\t *\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tconstructor(canvas: HTMLCanvasElement, x?: number, y?: number, w?: number, h?: number) {\r\n\t\t\tthis._canvas = canvas;\r\n\t\t\tif (x != null && y != null && w != null && h != null) {\r\n\t\t\t\tthis.x = x;\r\n\t\t\t\tthis.y = y;\r\n\t\t\t\tthis._width = w;\r\n\t\t\t\tthis._height = h;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.x = this.y = 0;\r\n\t\t\t\tthis._width = this._canvas.width;\r\n\t\t\t\tthis._height = this._canvas.height;\r\n\t\t\t}\r\n\t\t\tthis._ensure256Square();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Chrome has trouble copying from a canvas in RAM to a canvas in GPU memory\r\n\t\t * and vice versa, unless all canvases are >= 256x256.\r\n\t\t */\r\n\t\t_ensure256Square() {\r\n\t\t\tif (this._canvas.width < 256 || this._canvas.height < 256) {\r\n\t\t\t\tvar w: number = Math.max(256, this._canvas.width);\r\n\t\t\t\tvar h: number = Math.max(256, this._canvas.height);\r\n\t\t\t\tvar canvas2: HTMLCanvasElement = gtp.ImageUtils.createCanvas(w, h);\r\n\t\t\t\tvar ctx2: CanvasRenderingContext2D = canvas2.getContext('2d');\r\n\t\t\t\tctx2.drawImage(this._canvas, 0, 0);\r\n\t\t\t\tthis._canvas = canvas2;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Draws this image.\r\n\t\t *\r\n\t\t * @param {CanvasRenderingContext2D} ctx A canvas' graphics context.\r\n\t\t * @param {int} x The x-coordinate at which to draw.\r\n\t\t * @param {int} y The y-coordinate at which to draw.\r\n\t\t */\r\n\t\tdraw(ctx: CanvasRenderingContext2D, x: number, y: number) {\r\n\t\t\tif (!gtp.ImageUtils.allowSubpixelImageRendering) {\r\n\t\t\t\tx = Math.round(x);\r\n\t\t\t\ty = Math.round(y);\r\n\t\t\t}\r\n\t\t\tctx.drawImage(this._canvas, this.x, this.y, this._width, this._height,\r\n\t\t\t\tx, y, this._width, this._height);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Draws this image.\r\n\t\t *\r\n\t\t * @param {CanvasRenderingContext2D} ctx A canvas' graphics context.\r\n\t\t * @param {int} x The x-coordinate at which to draw.\r\n\t\t * @param {int} y The y-coordinate at which to draw.\r\n\t\t * @param {int} w The width to (possibly) stretch the image to when\r\n\t\t *              drawing.\r\n\t\t * @param {int} h The height to (possibly) stretch the image to when\r\n\t\t *              drawing.\r\n\t\t */\r\n\t\tdrawScaled(ctx: CanvasRenderingContext2D, x: number, y: number, w: number, h: number) {\r\n\t\t\tif (!gtp.ImageUtils.allowSubpixelImageRendering) {\r\n\t\t\t\tx = Math.round(x);\r\n\t\t\t\ty = Math.round(y);\r\n\t\t\t}\r\n\t\t\tctx.drawImage(this._canvas, this.x, this.y, this._width, this._height,\r\n\t\t\t\tx, y, w, h);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Draws this image.\r\n\t\t *\r\n\t\t * @param {CanvasRenderingContext2D} ctx A canvas' graphics context.\r\n\t\t * @param {int} srcX The x-coordinate at which to draw.\r\n\t\t * @param {int} srcY The y-coordinate at which to draw.\r\n\t\t * @param {int} srcW The width of the (possibly) sub-image to draw.\r\n\t\t * @param {int} srcH The height of the (possibly) sub-image to draw.\r\n\t\t * @param {int} destX The x-coordinate at which to draw.\r\n\t\t * @param {int} destY The y-coordinate at which to draw.\r\n\t\t * @param {int} destW The width to (possibly) stretch the image to when\r\n\t\t *              drawing.\r\n\t\t * @param {int} destH The height to (possibly) stretch the image to when\r\n\t\t *              drawing.\r\n\t\t */\r\n\t\tdrawScaled2(ctx: CanvasRenderingContext2D, srcX: number, srcY: number,\r\n\t\t\t\tsrcW: number, srcH: number,\r\n\t\t\t\tdestX: number, destY: number, destW: number, destH: number) {\r\n\r\n\t\t\tif (!gtp.ImageUtils.allowSubpixelImageRendering) {\r\n\t\t\t\tsrcX = Math.round(srcX);\r\n\t\t\t\tsrcY = Math.round(srcY);\r\n\t\t\t\tdestX = Math.round(destX);\r\n\t\t\t\tdestY = Math.round(destY);\r\n\t\t\t}\r\n\t\t\tsrcX = this.x + srcX;\r\n\t\t\tsrcY = this.y + srcY;\r\n\r\n\t\t\tctx.drawImage(this._canvas, srcX, srcY, srcW, srcH,\r\n\t\t\t\tdestX, destY, destW, destH);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Converts a color of a particular type to completely transparent in this\r\n\t\t * image.\r\n\t\t *\r\n\t\t * @param {int} x The x-coordinate of the pixel whose color to change.  0 will\r\n\t\t *        be used if this parameter is undefined.\r\n\t\t * @param {int} y The y-coordinate of the pixel whose color to change.  0 will\r\n\t\t *        be used if this parameter is undefined.\r\n\t\t * @return {Image} This image, which has been modified.\r\n\t\t * @method\r\n\t\t */\r\n\t\tmakeColorTranslucent(x: number = 0, y: number = 0) {\r\n\t\t\tgtp.ImageUtils.makeColorTranslucent(this._canvas, x, y);\r\n\t\t}\r\n\r\n\t\tget width(): number {\r\n\t\t\treturn this._width;\r\n\t\t}\r\n\r\n\t\tget height(): number {\r\n\t\t\treturn this._height;\r\n\t\t}\r\n\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}