{"version":3,"sources":["gtp/Rectangle.ts"],"names":["gtp","gtp.Rectangle","gtp.Rectangle.constructor","gtp.Rectangle.intersects"],"mappings":"AAAA,IAAO,GAAG,CA0DT;AA1DD,WAAO,GAAG,EAAC,CAAC;IACXA,YAAYA,CAACA;IAEbA;QAOCC;;;;;;;;WAQGA;QACHA,mBAAYA,CAAaA,EAAEA,CAAaA,EAAEA,CAAaA,EAAEA,CAAaA;YAA1DC,iBAAaA,GAAbA,KAAaA;YAAEA,iBAAaA,GAAbA,KAAaA;YAAEA,iBAAaA,GAAbA,KAAaA;YAAEA,iBAAaA,GAAbA,KAAaA;YACrEA,IAAIA,CAACA,CAACA,GAAGA,CAACA,CAACA;YACXA,IAAIA,CAACA,CAACA,GAAGA,CAACA,CAACA;YACXA,IAAIA,CAACA,CAACA,GAAGA,CAACA,CAACA;YACXA,IAAIA,CAACA,CAACA,GAAGA,CAACA,CAACA;QACZA,CAACA;QAEDD;;;;;;WAMGA;QACHA,8BAAUA,GAAVA,UAAWA,KAAoBA;YAE9BE,IAAIA,EAAEA,GAAWA,IAAIA,CAACA,CAACA,CAACA;YACxBA,IAAIA,EAAEA,GAAWA,IAAIA,CAACA,CAACA,CAACA;YACxBA,IAAIA,EAAEA,GAAWA,KAAKA,CAACA,CAACA,CAACA;YACzBA,IAAIA,EAAEA,GAAWA,KAAKA,CAACA,CAACA,CAACA;YACzBA,EAAEA,CAACA,CAACA,EAAEA,IAAIA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC9CA,MAAMA,CAACA,KAAKA,CAACA;YACdA,CAACA;YACDA,IAAIA,EAAEA,GAAWA,IAAIA,CAACA,CAACA,CAACA;YACxBA,IAAIA,EAAEA,GAAWA,IAAIA,CAACA,CAACA,CAACA;YACxBA,IAAIA,EAAEA,GAAWA,KAAKA,CAACA,CAACA,CAACA;YACzBA,IAAIA,EAAEA,GAAWA,KAAKA,CAACA,CAACA,CAACA;YACzBA,EAAEA,IAAIA,EAAEA,CAACA;YACTA,EAAEA,IAAIA,EAAEA,CAACA;YACTA,EAAEA,IAAIA,EAAEA,CAACA;YACTA,EAAEA,IAAIA,EAAEA,CAACA;YACTA,OAAOA,CAACA,GAAGA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,CAACA,CAACA;YAC5CA,6BAA6BA;YAC7BA,MAAMA,CAACA,CAACA,CAACA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,GAAGA,EAAEA,CAACA;gBAC3BA,CAACA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,GAAGA,EAAEA,CAACA;gBACpBA,CAACA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,GAAGA,EAAEA,CAACA;gBACpBA,CAACA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,GAAGA,EAAEA,CAACA,CAACA,CAACA;QACxBA,CAACA;QACFF,gBAACA;IAADA,CAtDAD,AAsDCC,IAAAD;IAtDYA,aAASA,YAsDrBA,CAAAA;AACFA,CAACA,EA1DM,GAAG,KAAH,GAAG,QA0DT","file":"gtp/Rectangle.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\texport class Rectangle {\r\n\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\tw: number;\r\n\t\th: number;\r\n\r\n\t\t/**\r\n\t\t * A simple rectangle class, containing some useful utility methods.\r\n\t\t * \r\n\t\t * @constructor\r\n\t\t * @param {int} [x=0] The x-coordinate.\r\n\t\t * @param {int} [y=0] The y-coordinate.\r\n\t\t * @param {int} [w=0] The width of the rectangle.\r\n\t\t * @param {int} [h=0] The height of the rectangle.\r\n\t\t */\r\n\t\tconstructor(x: number = 0, y: number = 0, w: number = 0, h: number = 0) {\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.w = w;\r\n\t\t\tthis.h = h;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns whether this rectangle intersects another.\r\n\t\t * \r\n\t\t * @param {gtp.Rectangle} rect2 Another rectangle to compare against.\r\n\t\t *        This should not be null.\r\n\t\t * @return {boolean} Whether the two rectangles intersect.\r\n\t\t */\r\n\t\tintersects(rect2: gtp.Rectangle): boolean {\r\n\r\n\t\t\tvar tw: number = this.w;\r\n\t\t\tvar th: number = this.h;\r\n\t\t\tvar rw: number = rect2.w;\r\n\t\t\tvar rh: number = rect2.h;\r\n\t\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar tx: number = this.x;\r\n\t\t\tvar ty: number = this.y;\r\n\t\t\tvar rx: number = rect2.x;\r\n\t\t\tvar ry: number = rect2.y;\r\n\t\t\trw += rx;\r\n\t\t\trh += ry;\r\n\t\t\ttw += tx;\r\n\t\t\tth += ty;\r\n\t\t\tconsole.log(rx, ry, rw, rh, tx, ty, tw, th);\r\n\t\t\t//      overflow || intersect\r\n\t\t\treturn ((rw < rx || rw > tx) &&\r\n\t\t\t\t(rh < ry || rh > ty) &&\r\n\t\t\t\t(tw < tx || tw > rx) &&\r\n\t\t\t\t(th < ty || th > ry));\r\n\t\t}\r\n\t}\r\n}"],"sourceRoot":"/source/"}