{"version":3,"sources":["gtp/Pool.ts"],"names":["gtp","gtp.Pool","gtp.Pool.constructor","gtp.Pool.borrowObj","gtp.Pool.borrowedCount","gtp.Pool.reset","gtp.Pool.returnObj","gtp.Pool.length","gtp.Pool.toString"],"mappings":"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","file":"gtp/Pool.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * An object pool.\tUseful if your game creates lots of very small\r\n\t * objects of the same type each frame, such as a path-finding algorithm.\r\n\t * <p>\r\n\t * NOTE: The <code>returnObj()</code> method may take linear time;\r\n\t * it's much more efficient to use <code>reset()</code> if possible.\r\n\t */\r\n\texport class Pool<T> {\r\n\r\n\t\tprivate _pool: T[];\r\n\t\tprivate _index: number;\r\n\t\tprivate _growCount: number;\r\n\t\tprivate _c: { new(): T };\r\n\r\n\t\t/**\r\n\t\t * Creates an object pool.\r\n\t\t * @param {Function} ctorFunc The constructor function for <code>T</code>\r\n\t\t *        instances.\r\n\t\t * @param {number} initialSize The initial size of the pool; defaults to\r\n\t\t *        <code>20</code>.\r\n\t\t * @param {number} growCount The amount to grow this pool by if too many\r\n\t\t *        objects are borrowed; defaults to <code>10</code>.\r\n\t\t */\r\n\t\tconstructor(ctorFunc: { new(): T }, initialSize: number = 20,\r\n\t\t\t\t\tgrowCount: number = 10) {\r\n\t\t\tthis._c = ctorFunc;\r\n\t\t\tthis._pool = [];\r\n\t\t\tfor (let i: number = 0; i < initialSize; i++) {\r\n\t\t\t\tthis._pool.push(new this._c());\r\n\t\t\t}\r\n\t\t\tthis._index = 0;\r\n\t\t\tthis._growCount = growCount;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets an object from this pool.\r\n\t\t * @return {T} An object from this pool.\r\n\t\t * @see returnObj\r\n\t\t * @see returnObj\r\n\t\t */\r\n\t\tborrowObj(): T {\r\n\t\t\tlet obj: T = this._pool[this._index++];\r\n\t\t\tif (this._index >= this._pool.length) {\r\n\t\t\t\tfor (let i: number = 0; i < this._growCount; i++) {\r\n\t\t\t\t\tthis._pool.push(new this._c());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the number of currently-borrowed objects.\r\n\t\t * @return {number} The number of currently-borrowed objects.\r\n\t\t */\r\n\t\tget borrowedCount(): number {\r\n\t\t\treturn this._index;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Acts as if all objects have been returned to this pool.\tThis method\r\n\t\t * should be used if you're implementing an algorithm that uses an\r\n\t\t * arbitrary number of objects, and just want to return them all when you\r\n\t\t * are done.\r\n\t\t * @see returnObj\r\n\t\t */\r\n\t\treset() {\r\n\t\t\tthis._index = 0;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns an object to this pool.\r\n\t\t * @param {T} obj The object to return.\r\n\t\t * @return {boolean} <code>true</code>, assuming the object was actually\r\n\t\t *         from this pool, and not previously returned.\tIn other words,\r\n\t\t *         this method will only return <code>false</code> if you try to\r\n\t\t *         incorrectly return an object.\r\n\t\t * @see borrowObj\r\n\t\t * @see reset\r\n\t\t */\r\n\t\treturnObj(obj: T): boolean {\r\n\r\n\t\t\t// Get the index of the object being returned.\r\n\t\t\tlet objIndex: number = -1;\r\n\t\t\tfor (let i: number = 0; i < this._index; i++) {\r\n\t\t\t\tif (obj === this._pool[i]) {\r\n\t\t\t\t\tobjIndex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (objIndex === -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Swap it with the most-recently borrowed object and move our index back\r\n\t\t\tlet temp: T = this._pool[--this._index];\r\n\t\t\tthis._pool[this._index] = this._pool[objIndex];\r\n\t\t\tthis._pool[objIndex] = temp;\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the total number of pooled objects, borrowed or otherwise.\r\n\t\t * Only really useful for debugging purposes.\r\n\t\t * @return {number} The total number of objects in this pool.\r\n\t\t */\r\n\t\tget length(): number {\r\n\t\t\treturn this._pool.length;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns this object as a string.\tUseful for debugging.\r\n\t\t * @return {string} A string representation of this pool.\r\n\t\t */\r\n\t\ttoString(): string {\r\n\t\t\treturn '[gtp.Pool: ' +\r\n\t\t\t\t\t'borrowed=' + this.borrowedCount +\r\n\t\t\t\t\t', size=' + this.length +\r\n\t\t\t\t\t']';\r\n\t\t}\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}