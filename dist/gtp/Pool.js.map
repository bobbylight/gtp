{"version":3,"sources":["gtp/Pool.ts"],"names":[],"mappings":"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","file":"gtp/Pool.js","sourcesContent":["module gtp {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * An object pool.\tUseful if your game creates lots of very small\r\n\t * objects of the same type each frame, such as a path-finding algorithm.\r\n\t * <p>\r\n\t * NOTE: The <code>returnObj()</code> method may take linear time;\r\n\t * it's much more efficient to use <code>reset()</code> if possible.\r\n\t */\r\n\texport class Pool<T> {\r\n\r\n\t\tprivate _pool: T[];\r\n\t\tprivate _index: number;\r\n\t\tprivate _growCount: number;\r\n\t\tprivate _c: { new(): T };\r\n\r\n\t\t/**\r\n\t\t * Creates an object pool.\r\n\t\t * @param {Function} ctorFunc The constructor function for <code>T</code>\r\n\t\t *        instances.\r\n\t\t * @param {number} initialSize The initial size of the pool; defaults to\r\n\t\t *        <code>20</code>.\r\n\t\t * @param {number} growCount The amount to grow this pool by if too many\r\n\t\t *        objects are borrowed; defaults to <code>10</code>.\r\n\t\t */\r\n\t\tconstructor(ctorFunc: { new(): T }, initialSize: number = 20,\r\n\t\t\t\t\tgrowCount: number = 10) {\r\n\t\t\tthis._c = ctorFunc;\r\n\t\t\tthis._pool = [];\r\n\t\t\tfor (let i: number = 0; i < initialSize; i++) {\r\n\t\t\t\tthis._pool.push(new this._c());\r\n\t\t\t}\r\n\t\t\tthis._index = 0;\r\n\t\t\tthis._growCount = growCount;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets an object from this pool.\r\n\t\t * @return {T} An object from this pool.\r\n\t\t * @see returnObj\r\n\t\t * @see returnObj\r\n\t\t */\r\n\t\tborrowObj(): T {\r\n\t\t\tlet obj: T = this._pool[this._index++];\r\n\t\t\tif (this._index >= this._pool.length) {\r\n\t\t\t\tfor (let i: number = 0; i < this._growCount; i++) {\r\n\t\t\t\t\tthis._pool.push(new this._c());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the number of currently-borrowed objects.\r\n\t\t * @return {number} The number of currently-borrowed objects.\r\n\t\t */\r\n\t\tget borrowedCount(): number {\r\n\t\t\treturn this._index;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Acts as if all objects have been returned to this pool.\tThis method\r\n\t\t * should be used if you're implementing an algorithm that uses an\r\n\t\t * arbitrary number of objects, and just want to return them all when you\r\n\t\t * are done.\r\n\t\t * @see returnObj\r\n\t\t */\r\n\t\treset() {\r\n\t\t\tthis._index = 0;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns an object to this pool.\r\n\t\t * @param {T} obj The object to return.\r\n\t\t * @return {boolean} <code>true</code>, assuming the object was actually\r\n\t\t *         from this pool, and not previously returned.\tIn other words,\r\n\t\t *         this method will only return <code>false</code> if you try to\r\n\t\t *         incorrectly return an object.\r\n\t\t * @see borrowObj\r\n\t\t * @see reset\r\n\t\t */\r\n\t\treturnObj(obj: T): boolean {\r\n\r\n\t\t\t// Get the index of the object being returned.\r\n\t\t\tlet objIndex: number = -1;\r\n\t\t\tfor (let i: number = 0; i < this._index; i++) {\r\n\t\t\t\tif (obj === this._pool[i]) {\r\n\t\t\t\t\tobjIndex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (objIndex === -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Swap it with the most-recently borrowed object and move our index back\r\n\t\t\tlet temp: T = this._pool[--this._index];\r\n\t\t\tthis._pool[this._index] = this._pool[objIndex];\r\n\t\t\tthis._pool[objIndex] = temp;\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the total number of pooled objects, borrowed or otherwise.\r\n\t\t * Only really useful for debugging purposes.\r\n\t\t * @return {number} The total number of objects in this pool.\r\n\t\t */\r\n\t\tget length(): number {\r\n\t\t\treturn this._pool.length;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns this object as a string.\tUseful for debugging.\r\n\t\t * @return {string} A string representation of this pool.\r\n\t\t */\r\n\t\ttoString(): string {\r\n\t\t\treturn '[gtp.Pool: ' +\r\n\t\t\t\t\t'borrowed=' + this.borrowedCount +\r\n\t\t\t\t\t', size=' + this.length +\r\n\t\t\t\t\t']';\r\n\t\t}\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}