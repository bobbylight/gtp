{"version":3,"sources":["gtp/Pool.ts"],"names":["gtp","gtp.Pool","gtp.Pool.constructor","gtp.Pool.borrowObj","gtp.Pool.borrowedCount","gtp.Pool.reset","gtp.Pool.returnObj","gtp.Pool.length","gtp.Pool.toString"],"mappings":"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","file":"gtp/Pool.js","sourcesContent":["module gtp {\r\n  'use strict';\r\n\r\n  /**\r\n   * An object pool.  Useful if your game creates lots of very small\r\n   * objects of the same type each frame, such as a path-finding algorithm.\r\n   * <p>\r\n   * NOTE: The <code>returnObj()</code> method may take linear time;\r\n   * it's much more efficient to use <code>reset()</code> if possible.\r\n   */\r\n  export class Pool<T> {\r\n\r\n    private _pool: T[];\r\n    private _index: number;\r\n    private _growCount: number;\r\n    private _c: { new(): T };\r\n\r\n    /**\r\n     * Creates an object pool.\r\n     * @param {Function} ctorFunc The constructor function for <code>T</code>\r\n     *        instances.\r\n     * @param {number} initialSize The initial size of the pool; defaults to\r\n     *        <code>20</code>.\r\n     * @param {number} growCount The amount to grow this pool by if too many\r\n     *        objects are borrowed; defaults to <code>10</code>.\r\n     */\r\n    constructor(ctorFunc: { new(): T }, initialSize: number = 20,\r\n          growCount: number = 10) {\r\n      this._c = ctorFunc;\r\n      this._pool = [];\r\n      for (let i: number = 0; i < initialSize; i++) {\r\n        this._pool.push(new this._c());\r\n      }\r\n      this._index = 0;\r\n      this._growCount = growCount;\r\n    }\r\n\r\n    /**\r\n     * Gets an object from this pool.\r\n     * @return {T} An object from this pool.\r\n     * @see returnObj\r\n     * @see returnObj\r\n     */\r\n    borrowObj(): T {\r\n      let obj: T = this._pool[this._index++];\r\n      if (this._index >= this._pool.length) {\r\n        for (let i: number = 0; i < this._growCount; i++) {\r\n          this._pool.push(new this._c());\r\n        }\r\n      }\r\n      return obj;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of currently-borrowed objects.\r\n     * @return {number} The number of currently-borrowed objects.\r\n     */\r\n    get borrowedCount(): number {\r\n      return this._index;\r\n    }\r\n\r\n    /**\r\n     * Acts as if all objects have been returned to this pool.  This method\r\n     * should be used if you're implementing an algorithm that uses an\r\n     * arbitrary number of objects, and just want to return them all when you\r\n     * are done.\r\n     * @see returnObj\r\n     */\r\n    reset() {\r\n      this._index = 0;\r\n    }\r\n\r\n    /**\r\n     * Returns an object to this pool.\r\n     * @param {T} obj The object to return.\r\n     * @return {boolean} <code>true</code>, assuming the object was actually\r\n     *         from this pool, and not previously returned.  In other words,\r\n     *         this method will only return <code>false</code> if you try to\r\n     *         incorrectly return an object.\r\n     * @see borrowObj\r\n     * @see reset\r\n     */\r\n    returnObj(obj: T): boolean {\r\n\r\n      // Get the index of the object being returned.\r\n      let objIndex: number = -1;\r\n      for (let i: number = 0; i < this._index; i++) {\r\n         if (obj === this._pool[i]) {\r\n           objIndex = i;\r\n           break;\r\n         }\r\n      }\r\n\r\n      if (objIndex === -1) {\r\n        return false;\r\n      }\r\n\r\n      // Swap it with the most-recently borrowed object and move our index back\r\n      let temp: T = this._pool[--this._index];\r\n      this._pool[this._index] = this._pool[objIndex];\r\n      this._pool[objIndex] = temp;\r\n\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of pooled objects, borrowed or otherwise.\r\n     * Only really useful for debugging purposes.\r\n     * @return {number} The total number of objects in this pool.\r\n     */\r\n    get length(): number {\r\n      return this._pool.length;\r\n    }\r\n\r\n    /**\r\n     * Returns this object as a string.  Useful for debugging.\r\n     * @return {string} A string representation of this pool.\r\n     */\r\n    toString(): string {\r\n      return '[gtp.Pool: ' +\r\n          'borrowed=' + this.borrowedCount +\r\n          ', size=' + this.length +\r\n          ']';\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}